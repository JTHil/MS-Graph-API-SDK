from __future__ import annotations
import datetime
from dataclasses import dataclass, field
from kiota_abstractions.serialization import AdditionalDataHolder, Parsable, ParseNode, SerializationWriter
from kiota_abstractions.store import BackedModel, BackingStore, BackingStoreFactorySingleton
from typing import Any, Callable, Dict, List, Optional, TYPE_CHECKING, Union

if TYPE_CHECKING:
    from .audio_codec import AudioCodec
    from .media_stream_direction import MediaStreamDirection
    from .video_codec import VideoCodec

@dataclass
class MediaStream(AdditionalDataHolder, BackedModel, Parsable):
    # Stores model information.
    backing_store: BackingStore = field(default_factory=BackingStoreFactorySingleton(backing_store_factory=None).backing_store_factory.create_backing_store, repr=False)

    # Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
    additional_data: Dict[str, Any] = field(default_factory=dict)
    # Codec name used to encode audio for transmission on the network. Possible values are: unknown, invalid, cn, pcma, pcmu, amrWide, g722, g7221, g7221c, g729, multiChannelAudio, muchv2, opus, satin, satinFullband, rtAudio8, rtAudio16, silk, silkNarrow, silkWide, siren, xmsRta, unknownFutureValue.
    audio_codec: Optional[AudioCodec] = None
    # Average Network Mean Opinion Score degradation for stream. Represents how much the network loss and jitter has impacted the quality of received audio.
    average_audio_degradation: Optional[float] = None
    # Average jitter for the stream computed as specified in [RFC 3550][], denoted in [ISO 8601][] format. For example, 1 second is denoted as 'PT1S', where 'P' is the duration designator, 'T' is the time designator, and 'S' is the second designator.
    average_audio_network_jitter: Optional[datetime.timedelta] = None
    # Average estimated bandwidth available between two endpoints in bits per second.
    average_bandwidth_estimate: Optional[int] = None
    # Average duration of the received freezing time in the video stream.
    average_freeze_duration: Optional[datetime.timedelta] = None
    # Average jitter for the stream computed as specified in [RFC 3550][], denoted in [ISO 8601][] format. For example, 1 second is denoted as 'PT1S', where 'P' is the duration designator, 'T' is the time designator, and 'S' is the second designator.
    average_jitter: Optional[datetime.timedelta] = None
    # Average packet loss rate for stream.
    average_packet_loss_rate: Optional[float] = None
    # Ratio of the number of audio frames with samples generated by packet loss concealment to the total number of audio frames.
    average_ratio_of_concealed_samples: Optional[float] = None
    # Average frames per second received for all video streams computed over the duration of the session.
    average_received_frame_rate: Optional[float] = None
    # Average network propagation round-trip time computed as specified in [RFC 3550][], denoted in [ISO 8601][] format. For example, 1 second is denoted as 'PT1S', where 'P' is the duration designator, 'T' is the time designator, and 'S' is the second designator.
    average_round_trip_time: Optional[datetime.timedelta] = None
    # Average percentage of video frames lost as displayed to the user.
    average_video_frame_loss_percentage: Optional[float] = None
    # Average frames per second received for a video stream, computed over the duration of the session.
    average_video_frame_rate: Optional[float] = None
    # Average fraction of packets lost, as specified in [RFC 3550][], computed over the duration of the session.
    average_video_packet_loss_rate: Optional[float] = None
    # UTC time when the stream ended. The DateTimeOffset type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. This field is only available for streams that use the SIP protocol.
    end_date_time: Optional[datetime.datetime] = None
    # Indicates whether the forward error correction (FEC) was used at some point during the session. The default value is null.
    is_audio_forward_error_correction_used: Optional[bool] = None
    # Fraction of the call where frame rate is less than 7.5 frames per second.
    low_frame_rate_ratio: Optional[float] = None
    # Fraction of the call that the client is running less than 70% expected video processing capability.
    low_video_processing_capability_ratio: Optional[float] = None
    # Maximum of audio network jitter computed over each of the 20 second windows during the session, denoted in [ISO 8601][] format. For example, 1 second is denoted as 'PT1S', where 'P' is the duration designator, 'T' is the time designator, and 'S' is the second designator.
    max_audio_network_jitter: Optional[datetime.timedelta] = None
    # Maximum jitter for the stream computed as specified in RFC 3550, denoted in [ISO 8601][] format. For example, 1 second is denoted as 'PT1S', where 'P' is the duration designator, 'T' is the time designator, and 'S' is the second designator.
    max_jitter: Optional[datetime.timedelta] = None
    # Maximum packet loss rate for the stream.
    max_packet_loss_rate: Optional[float] = None
    # Maximum ratio of packets concealed by the healer.
    max_ratio_of_concealed_samples: Optional[float] = None
    # Maximum network propagation round-trip time computed as specified in [RFC 3550][], denoted in [ISO 8601][] format. For example, 1 second is denoted as 'PT1S', where 'P' is the duration designator, 'T' is the time designator, and 'S' is the second designator.
    max_round_trip_time: Optional[datetime.timedelta] = None
    # The OdataType property
    odata_type: Optional[str] = None
    # Packet count for the stream.
    packet_utilization: Optional[int] = None
    # Packet loss rate after FEC has been applied aggregated across all video streams and codecs.
    post_forward_error_correction_packet_loss_rate: Optional[float] = None
    # Average duration of the received freezing time in the video stream represented in root mean square.
    rms_freeze_duration: Optional[datetime.timedelta] = None
    # UTC time when the stream started. The DateTimeOffset type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. This field is only available for streams that use the SIP protocol.
    start_date_time: Optional[datetime.datetime] = None
    # The streamDirection property
    stream_direction: Optional[MediaStreamDirection] = None
    # Unique identifier for the stream.
    stream_id: Optional[str] = None
    # Codec name used to encode video for transmission on the network. Possible values are: unknown, invalid, av1, h263, h264, h264s, h264uc, h265, rtvc1, rtVideo, xrtvc1, unknownFutureValue.
    video_codec: Optional[VideoCodec] = None
    # True if the media stream bypassed the Mediation Server and went straight between client and PSTN Gateway/PBX, false otherwise.
    was_media_bypassed: Optional[bool] = None
    
    @staticmethod
    def create_from_discriminator_value(parse_node: Optional[ParseNode] = None) -> MediaStream:
        """
        Creates a new instance of the appropriate class based on discriminator value
        param parse_node: The parse node to use to read the discriminator value and create the object
        Returns: MediaStream
        """
        if not parse_node:
            raise TypeError("parse_node cannot be null.")
        return MediaStream()
    
    def get_field_deserializers(self,) -> Dict[str, Callable[[ParseNode], None]]:
        """
        The deserialization information for the current model
        Returns: Dict[str, Callable[[ParseNode], None]]
        """
        from .audio_codec import AudioCodec
        from .media_stream_direction import MediaStreamDirection
        from .video_codec import VideoCodec

        from .audio_codec import AudioCodec
        from .media_stream_direction import MediaStreamDirection
        from .video_codec import VideoCodec

        fields: Dict[str, Callable[[Any], None]] = {
            "audio_codec": lambda n : setattr(self, 'audio_codec', n.get_enum_value(AudioCodec)),
            "average_audio_degradation": lambda n : setattr(self, 'average_audio_degradation', n.get_float_value()),
            "average_audio_network_jitter": lambda n : setattr(self, 'average_audio_network_jitter', n.get_timedelta_value()),
            "average_bandwidth_estimate": lambda n : setattr(self, 'average_bandwidth_estimate', n.get_int_value()),
            "average_freeze_duration": lambda n : setattr(self, 'average_freeze_duration', n.get_timedelta_value()),
            "average_jitter": lambda n : setattr(self, 'average_jitter', n.get_timedelta_value()),
            "average_packet_loss_rate": lambda n : setattr(self, 'average_packet_loss_rate', n.get_float_value()),
            "average_ratio_of_concealed_samples": lambda n : setattr(self, 'average_ratio_of_concealed_samples', n.get_float_value()),
            "average_received_frame_rate": lambda n : setattr(self, 'average_received_frame_rate', n.get_float_value()),
            "average_round_trip_time": lambda n : setattr(self, 'average_round_trip_time', n.get_timedelta_value()),
            "average_video_frame_loss_percentage": lambda n : setattr(self, 'average_video_frame_loss_percentage', n.get_float_value()),
            "average_video_frame_rate": lambda n : setattr(self, 'average_video_frame_rate', n.get_float_value()),
            "average_video_packet_loss_rate": lambda n : setattr(self, 'average_video_packet_loss_rate', n.get_float_value()),
            "end_date_time": lambda n : setattr(self, 'end_date_time', n.get_datetime_value()),
            "is_audio_forward_error_correction_used": lambda n : setattr(self, 'is_audio_forward_error_correction_used', n.get_bool_value()),
            "low_frame_rate_ratio": lambda n : setattr(self, 'low_frame_rate_ratio', n.get_float_value()),
            "low_video_processing_capability_ratio": lambda n : setattr(self, 'low_video_processing_capability_ratio', n.get_float_value()),
            "max_audio_network_jitter": lambda n : setattr(self, 'max_audio_network_jitter', n.get_timedelta_value()),
            "max_jitter": lambda n : setattr(self, 'max_jitter', n.get_timedelta_value()),
            "max_packet_loss_rate": lambda n : setattr(self, 'max_packet_loss_rate', n.get_float_value()),
            "max_ratio_of_concealed_samples": lambda n : setattr(self, 'max_ratio_of_concealed_samples', n.get_float_value()),
            "max_round_trip_time": lambda n : setattr(self, 'max_round_trip_time', n.get_timedelta_value()),
            "@odata.type": lambda n : setattr(self, 'odata_type', n.get_str_value()),
            "packet_utilization": lambda n : setattr(self, 'packet_utilization', n.get_int_value()),
            "post_forward_error_correction_packet_loss_rate": lambda n : setattr(self, 'post_forward_error_correction_packet_loss_rate', n.get_float_value()),
            "rms_freeze_duration": lambda n : setattr(self, 'rms_freeze_duration', n.get_timedelta_value()),
            "start_date_time": lambda n : setattr(self, 'start_date_time', n.get_datetime_value()),
            "stream_direction": lambda n : setattr(self, 'stream_direction', n.get_enum_value(MediaStreamDirection)),
            "stream_id": lambda n : setattr(self, 'stream_id', n.get_str_value()),
            "video_codec": lambda n : setattr(self, 'video_codec', n.get_enum_value(VideoCodec)),
            "was_media_bypassed": lambda n : setattr(self, 'was_media_bypassed', n.get_bool_value()),
        }
        return fields
    
    def serialize(self,writer: SerializationWriter) -> None:
        """
        Serializes information the current object
        param writer: Serialization writer to use to serialize this model
        Returns: None
        """
        if not writer:
            raise TypeError("writer cannot be null.")
        writer.write_enum_value("audio_codec", self.audio_codec)
        writer.write_float_value("average_audio_degradation", self.average_audio_degradation)
        writer.write_timedelta_value("average_audio_network_jitter", self.average_audio_network_jitter)
        writer.write_int_value("average_bandwidth_estimate", self.average_bandwidth_estimate)
        writer.write_timedelta_value("average_freeze_duration", self.average_freeze_duration)
        writer.write_timedelta_value("average_jitter", self.average_jitter)
        writer.write_float_value("average_packet_loss_rate", self.average_packet_loss_rate)
        writer.write_float_value("average_ratio_of_concealed_samples", self.average_ratio_of_concealed_samples)
        writer.write_float_value("average_received_frame_rate", self.average_received_frame_rate)
        writer.write_timedelta_value("average_round_trip_time", self.average_round_trip_time)
        writer.write_float_value("average_video_frame_loss_percentage", self.average_video_frame_loss_percentage)
        writer.write_float_value("average_video_frame_rate", self.average_video_frame_rate)
        writer.write_float_value("average_video_packet_loss_rate", self.average_video_packet_loss_rate)
        writer.write_datetime_value("end_date_time", self.end_date_time)
        writer.write_bool_value("is_audio_forward_error_correction_used", self.is_audio_forward_error_correction_used)
        writer.write_float_value("low_frame_rate_ratio", self.low_frame_rate_ratio)
        writer.write_float_value("low_video_processing_capability_ratio", self.low_video_processing_capability_ratio)
        writer.write_timedelta_value("max_audio_network_jitter", self.max_audio_network_jitter)
        writer.write_timedelta_value("max_jitter", self.max_jitter)
        writer.write_float_value("max_packet_loss_rate", self.max_packet_loss_rate)
        writer.write_float_value("max_ratio_of_concealed_samples", self.max_ratio_of_concealed_samples)
        writer.write_timedelta_value("max_round_trip_time", self.max_round_trip_time)
        writer.write_str_value("@odata.type", self.odata_type)
        writer.write_int_value("packet_utilization", self.packet_utilization)
        writer.write_float_value("post_forward_error_correction_packet_loss_rate", self.post_forward_error_correction_packet_loss_rate)
        writer.write_timedelta_value("rms_freeze_duration", self.rms_freeze_duration)
        writer.write_datetime_value("start_date_time", self.start_date_time)
        writer.write_enum_value("stream_direction", self.stream_direction)
        writer.write_str_value("stream_id", self.stream_id)
        writer.write_enum_value("video_codec", self.video_codec)
        writer.write_bool_value("was_media_bypassed", self.was_media_bypassed)
        writer.write_additional_data_value(self.additional_data)
    

