from __future__ import annotations
from dataclasses import dataclass
from datetime import date, datetime
from kiota_abstractions.get_path_parameters import get_path_parameters
from kiota_abstractions.method import Method
from kiota_abstractions.request_adapter import RequestAdapter
from kiota_abstractions.request_information import RequestInformation
from kiota_abstractions.request_option import RequestOption
from kiota_abstractions.response_handler import ResponseHandler
from kiota_abstractions.serialization import Parsable, ParsableFactory
from kiota_abstractions.utils import lazy_import
from typing import Any, Callable, Dict, List, Optional, Union

report_root = lazy_import('msgraph.generated.models.report_root')
o_data_error = lazy_import('msgraph.generated.models.o_data_errors.o_data_error')
daily_print_usage_by_printer_request_builder = lazy_import('msgraph.generated.reports.daily_print_usage_by_printer.daily_print_usage_by_printer_request_builder')
print_usage_by_printer_item_request_builder = lazy_import('msgraph.generated.reports.daily_print_usage_by_printer.item.print_usage_by_printer_item_request_builder')
daily_print_usage_by_user_request_builder = lazy_import('msgraph.generated.reports.daily_print_usage_by_user.daily_print_usage_by_user_request_builder')
print_usage_by_user_item_request_builder = lazy_import('msgraph.generated.reports.daily_print_usage_by_user.item.print_usage_by_user_item_request_builder')
microsoft_graph_device_configuration_device_activity_request_builder = lazy_import('msgraph.generated.reports.microsoft_graph_device_configuration_device_activity.microsoft_graph_device_configuration_device_activity_request_builder')
microsoft_graph_device_configuration_user_activity_request_builder = lazy_import('msgraph.generated.reports.microsoft_graph_device_configuration_user_activity.microsoft_graph_device_configuration_user_activity_request_builder')
microsoft_graph_get_email_activity_counts_with_period_request_builder = lazy_import('msgraph.generated.reports.microsoft_graph_get_email_activity_counts_with_period.microsoft_graph_get_email_activity_counts_with_period_request_builder')
microsoft_graph_get_email_activity_user_counts_with_period_request_builder = lazy_import('msgraph.generated.reports.microsoft_graph_get_email_activity_user_counts_with_period.microsoft_graph_get_email_activity_user_counts_with_period_request_builder')
microsoft_graph_get_email_activity_user_detail_with_date_request_builder = lazy_import('msgraph.generated.reports.microsoft_graph_get_email_activity_user_detail_with_date.microsoft_graph_get_email_activity_user_detail_with_date_request_builder')
microsoft_graph_get_email_activity_user_detail_with_period_request_builder = lazy_import('msgraph.generated.reports.microsoft_graph_get_email_activity_user_detail_with_period.microsoft_graph_get_email_activity_user_detail_with_period_request_builder')
microsoft_graph_get_email_app_usage_apps_user_counts_with_period_request_builder = lazy_import('msgraph.generated.reports.microsoft_graph_get_email_app_usage_apps_user_counts_with_period.microsoft_graph_get_email_app_usage_apps_user_counts_with_period_request_builder')
microsoft_graph_get_email_app_usage_user_counts_with_period_request_builder = lazy_import('msgraph.generated.reports.microsoft_graph_get_email_app_usage_user_counts_with_period.microsoft_graph_get_email_app_usage_user_counts_with_period_request_builder')
microsoft_graph_get_email_app_usage_user_detail_with_date_request_builder = lazy_import('msgraph.generated.reports.microsoft_graph_get_email_app_usage_user_detail_with_date.microsoft_graph_get_email_app_usage_user_detail_with_date_request_builder')
microsoft_graph_get_email_app_usage_user_detail_with_period_request_builder = lazy_import('msgraph.generated.reports.microsoft_graph_get_email_app_usage_user_detail_with_period.microsoft_graph_get_email_app_usage_user_detail_with_period_request_builder')
microsoft_graph_get_email_app_usage_versions_user_counts_with_period_request_builder = lazy_import('msgraph.generated.reports.microsoft_graph_get_email_app_usage_versions_user_counts_with_period.microsoft_graph_get_email_app_usage_versions_user_counts_with_period_request_builder')
microsoft_graph_get_group_archived_print_jobs_with_group_id_with_start_date_time_with_end_date_time_request_builder = lazy_import('msgraph.generated.reports.microsoft_graph_get_group_archived_print_jobs_with_group_id_with_start_date_time_with_end_date_time.microsoft_graph_get_group_archived_print_jobs_with_group_id_with_start_date_time_with_end_date_time_request_builder')
microsoft_graph_get_m365_app_platform_user_counts_with_period_request_builder = lazy_import('msgraph.generated.reports.microsoft_graph_get_m365_app_platform_user_counts_with_period.microsoft_graph_get_m365_app_platform_user_counts_with_period_request_builder')
microsoft_graph_get_m365_app_user_counts_with_period_request_builder = lazy_import('msgraph.generated.reports.microsoft_graph_get_m365_app_user_counts_with_period.microsoft_graph_get_m365_app_user_counts_with_period_request_builder')
microsoft_graph_get_m365_app_user_detail_with_date_request_builder = lazy_import('msgraph.generated.reports.microsoft_graph_get_m365_app_user_detail_with_date.microsoft_graph_get_m365_app_user_detail_with_date_request_builder')
microsoft_graph_get_m365_app_user_detail_with_period_request_builder = lazy_import('msgraph.generated.reports.microsoft_graph_get_m365_app_user_detail_with_period.microsoft_graph_get_m365_app_user_detail_with_period_request_builder')
microsoft_graph_get_mailbox_usage_detail_with_period_request_builder = lazy_import('msgraph.generated.reports.microsoft_graph_get_mailbox_usage_detail_with_period.microsoft_graph_get_mailbox_usage_detail_with_period_request_builder')
microsoft_graph_get_mailbox_usage_mailbox_counts_with_period_request_builder = lazy_import('msgraph.generated.reports.microsoft_graph_get_mailbox_usage_mailbox_counts_with_period.microsoft_graph_get_mailbox_usage_mailbox_counts_with_period_request_builder')
microsoft_graph_get_mailbox_usage_quota_status_mailbox_counts_with_period_request_builder = lazy_import('msgraph.generated.reports.microsoft_graph_get_mailbox_usage_quota_status_mailbox_counts_with_period.microsoft_graph_get_mailbox_usage_quota_status_mailbox_counts_with_period_request_builder')
microsoft_graph_get_mailbox_usage_storage_with_period_request_builder = lazy_import('msgraph.generated.reports.microsoft_graph_get_mailbox_usage_storage_with_period.microsoft_graph_get_mailbox_usage_storage_with_period_request_builder')
microsoft_graph_get_office365_activation_counts_request_builder = lazy_import('msgraph.generated.reports.microsoft_graph_get_office365_activation_counts.microsoft_graph_get_office365_activation_counts_request_builder')
microsoft_graph_get_office365_activations_user_counts_request_builder = lazy_import('msgraph.generated.reports.microsoft_graph_get_office365_activations_user_counts.microsoft_graph_get_office365_activations_user_counts_request_builder')
microsoft_graph_get_office365_activations_user_detail_request_builder = lazy_import('msgraph.generated.reports.microsoft_graph_get_office365_activations_user_detail.microsoft_graph_get_office365_activations_user_detail_request_builder')
microsoft_graph_get_office365_active_user_counts_with_period_request_builder = lazy_import('msgraph.generated.reports.microsoft_graph_get_office365_active_user_counts_with_period.microsoft_graph_get_office365_active_user_counts_with_period_request_builder')
microsoft_graph_get_office365_active_user_detail_with_date_request_builder = lazy_import('msgraph.generated.reports.microsoft_graph_get_office365_active_user_detail_with_date.microsoft_graph_get_office365_active_user_detail_with_date_request_builder')
microsoft_graph_get_office365_active_user_detail_with_period_request_builder = lazy_import('msgraph.generated.reports.microsoft_graph_get_office365_active_user_detail_with_period.microsoft_graph_get_office365_active_user_detail_with_period_request_builder')
microsoft_graph_get_office365_groups_activity_counts_with_period_request_builder = lazy_import('msgraph.generated.reports.microsoft_graph_get_office365_groups_activity_counts_with_period.microsoft_graph_get_office365_groups_activity_counts_with_period_request_builder')
microsoft_graph_get_office365_groups_activity_detail_with_date_request_builder = lazy_import('msgraph.generated.reports.microsoft_graph_get_office365_groups_activity_detail_with_date.microsoft_graph_get_office365_groups_activity_detail_with_date_request_builder')
microsoft_graph_get_office365_groups_activity_detail_with_period_request_builder = lazy_import('msgraph.generated.reports.microsoft_graph_get_office365_groups_activity_detail_with_period.microsoft_graph_get_office365_groups_activity_detail_with_period_request_builder')
microsoft_graph_get_office365_groups_activity_file_counts_with_period_request_builder = lazy_import('msgraph.generated.reports.microsoft_graph_get_office365_groups_activity_file_counts_with_period.microsoft_graph_get_office365_groups_activity_file_counts_with_period_request_builder')
microsoft_graph_get_office365_groups_activity_group_counts_with_period_request_builder = lazy_import('msgraph.generated.reports.microsoft_graph_get_office365_groups_activity_group_counts_with_period.microsoft_graph_get_office365_groups_activity_group_counts_with_period_request_builder')
microsoft_graph_get_office365_groups_activity_storage_with_period_request_builder = lazy_import('msgraph.generated.reports.microsoft_graph_get_office365_groups_activity_storage_with_period.microsoft_graph_get_office365_groups_activity_storage_with_period_request_builder')
microsoft_graph_get_office365_services_user_counts_with_period_request_builder = lazy_import('msgraph.generated.reports.microsoft_graph_get_office365_services_user_counts_with_period.microsoft_graph_get_office365_services_user_counts_with_period_request_builder')
microsoft_graph_get_one_drive_activity_file_counts_with_period_request_builder = lazy_import('msgraph.generated.reports.microsoft_graph_get_one_drive_activity_file_counts_with_period.microsoft_graph_get_one_drive_activity_file_counts_with_period_request_builder')
microsoft_graph_get_one_drive_activity_user_counts_with_period_request_builder = lazy_import('msgraph.generated.reports.microsoft_graph_get_one_drive_activity_user_counts_with_period.microsoft_graph_get_one_drive_activity_user_counts_with_period_request_builder')
microsoft_graph_get_one_drive_activity_user_detail_with_date_request_builder = lazy_import('msgraph.generated.reports.microsoft_graph_get_one_drive_activity_user_detail_with_date.microsoft_graph_get_one_drive_activity_user_detail_with_date_request_builder')
microsoft_graph_get_one_drive_activity_user_detail_with_period_request_builder = lazy_import('msgraph.generated.reports.microsoft_graph_get_one_drive_activity_user_detail_with_period.microsoft_graph_get_one_drive_activity_user_detail_with_period_request_builder')
microsoft_graph_get_one_drive_usage_account_counts_with_period_request_builder = lazy_import('msgraph.generated.reports.microsoft_graph_get_one_drive_usage_account_counts_with_period.microsoft_graph_get_one_drive_usage_account_counts_with_period_request_builder')
microsoft_graph_get_one_drive_usage_account_detail_with_date_request_builder = lazy_import('msgraph.generated.reports.microsoft_graph_get_one_drive_usage_account_detail_with_date.microsoft_graph_get_one_drive_usage_account_detail_with_date_request_builder')
microsoft_graph_get_one_drive_usage_account_detail_with_period_request_builder = lazy_import('msgraph.generated.reports.microsoft_graph_get_one_drive_usage_account_detail_with_period.microsoft_graph_get_one_drive_usage_account_detail_with_period_request_builder')
microsoft_graph_get_one_drive_usage_file_counts_with_period_request_builder = lazy_import('msgraph.generated.reports.microsoft_graph_get_one_drive_usage_file_counts_with_period.microsoft_graph_get_one_drive_usage_file_counts_with_period_request_builder')
microsoft_graph_get_one_drive_usage_storage_with_period_request_builder = lazy_import('msgraph.generated.reports.microsoft_graph_get_one_drive_usage_storage_with_period.microsoft_graph_get_one_drive_usage_storage_with_period_request_builder')
microsoft_graph_get_printer_archived_print_jobs_with_printer_id_with_start_date_time_with_end_date_time_request_builder = lazy_import('msgraph.generated.reports.microsoft_graph_get_printer_archived_print_jobs_with_printer_id_with_start_date_time_with_end_date_time.microsoft_graph_get_printer_archived_print_jobs_with_printer_id_with_start_date_time_with_end_date_time_request_builder')
microsoft_graph_get_share_point_activity_file_counts_with_period_request_builder = lazy_import('msgraph.generated.reports.microsoft_graph_get_share_point_activity_file_counts_with_period.microsoft_graph_get_share_point_activity_file_counts_with_period_request_builder')
microsoft_graph_get_share_point_activity_pages_with_period_request_builder = lazy_import('msgraph.generated.reports.microsoft_graph_get_share_point_activity_pages_with_period.microsoft_graph_get_share_point_activity_pages_with_period_request_builder')
microsoft_graph_get_share_point_activity_user_counts_with_period_request_builder = lazy_import('msgraph.generated.reports.microsoft_graph_get_share_point_activity_user_counts_with_period.microsoft_graph_get_share_point_activity_user_counts_with_period_request_builder')
microsoft_graph_get_share_point_activity_user_detail_with_date_request_builder = lazy_import('msgraph.generated.reports.microsoft_graph_get_share_point_activity_user_detail_with_date.microsoft_graph_get_share_point_activity_user_detail_with_date_request_builder')
microsoft_graph_get_share_point_activity_user_detail_with_period_request_builder = lazy_import('msgraph.generated.reports.microsoft_graph_get_share_point_activity_user_detail_with_period.microsoft_graph_get_share_point_activity_user_detail_with_period_request_builder')
microsoft_graph_get_share_point_site_usage_detail_with_date_request_builder = lazy_import('msgraph.generated.reports.microsoft_graph_get_share_point_site_usage_detail_with_date.microsoft_graph_get_share_point_site_usage_detail_with_date_request_builder')
microsoft_graph_get_share_point_site_usage_detail_with_period_request_builder = lazy_import('msgraph.generated.reports.microsoft_graph_get_share_point_site_usage_detail_with_period.microsoft_graph_get_share_point_site_usage_detail_with_period_request_builder')
microsoft_graph_get_share_point_site_usage_file_counts_with_period_request_builder = lazy_import('msgraph.generated.reports.microsoft_graph_get_share_point_site_usage_file_counts_with_period.microsoft_graph_get_share_point_site_usage_file_counts_with_period_request_builder')
microsoft_graph_get_share_point_site_usage_pages_with_period_request_builder = lazy_import('msgraph.generated.reports.microsoft_graph_get_share_point_site_usage_pages_with_period.microsoft_graph_get_share_point_site_usage_pages_with_period_request_builder')
microsoft_graph_get_share_point_site_usage_site_counts_with_period_request_builder = lazy_import('msgraph.generated.reports.microsoft_graph_get_share_point_site_usage_site_counts_with_period.microsoft_graph_get_share_point_site_usage_site_counts_with_period_request_builder')
microsoft_graph_get_share_point_site_usage_storage_with_period_request_builder = lazy_import('msgraph.generated.reports.microsoft_graph_get_share_point_site_usage_storage_with_period.microsoft_graph_get_share_point_site_usage_storage_with_period_request_builder')
microsoft_graph_get_skype_for_business_activity_counts_with_period_request_builder = lazy_import('msgraph.generated.reports.microsoft_graph_get_skype_for_business_activity_counts_with_period.microsoft_graph_get_skype_for_business_activity_counts_with_period_request_builder')
microsoft_graph_get_skype_for_business_activity_user_counts_with_period_request_builder = lazy_import('msgraph.generated.reports.microsoft_graph_get_skype_for_business_activity_user_counts_with_period.microsoft_graph_get_skype_for_business_activity_user_counts_with_period_request_builder')
microsoft_graph_get_skype_for_business_activity_user_detail_with_date_request_builder = lazy_import('msgraph.generated.reports.microsoft_graph_get_skype_for_business_activity_user_detail_with_date.microsoft_graph_get_skype_for_business_activity_user_detail_with_date_request_builder')
microsoft_graph_get_skype_for_business_activity_user_detail_with_period_request_builder = lazy_import('msgraph.generated.reports.microsoft_graph_get_skype_for_business_activity_user_detail_with_period.microsoft_graph_get_skype_for_business_activity_user_detail_with_period_request_builder')
microsoft_graph_get_skype_for_business_device_usage_distribution_user_counts_with_period_request_builder = lazy_import('msgraph.generated.reports.microsoft_graph_get_skype_for_business_device_usage_distribution_user_counts_with_period.microsoft_graph_get_skype_for_business_device_usage_distribution_user_counts_with_period_request_builder')
microsoft_graph_get_skype_for_business_device_usage_user_counts_with_period_request_builder = lazy_import('msgraph.generated.reports.microsoft_graph_get_skype_for_business_device_usage_user_counts_with_period.microsoft_graph_get_skype_for_business_device_usage_user_counts_with_period_request_builder')
microsoft_graph_get_skype_for_business_device_usage_user_detail_with_date_request_builder = lazy_import('msgraph.generated.reports.microsoft_graph_get_skype_for_business_device_usage_user_detail_with_date.microsoft_graph_get_skype_for_business_device_usage_user_detail_with_date_request_builder')
microsoft_graph_get_skype_for_business_device_usage_user_detail_with_period_request_builder = lazy_import('msgraph.generated.reports.microsoft_graph_get_skype_for_business_device_usage_user_detail_with_period.microsoft_graph_get_skype_for_business_device_usage_user_detail_with_period_request_builder')
microsoft_graph_get_skype_for_business_organizer_activity_counts_with_period_request_builder = lazy_import('msgraph.generated.reports.microsoft_graph_get_skype_for_business_organizer_activity_counts_with_period.microsoft_graph_get_skype_for_business_organizer_activity_counts_with_period_request_builder')
microsoft_graph_get_skype_for_business_organizer_activity_minute_counts_with_period_request_builder = lazy_import('msgraph.generated.reports.microsoft_graph_get_skype_for_business_organizer_activity_minute_counts_with_period.microsoft_graph_get_skype_for_business_organizer_activity_minute_counts_with_period_request_builder')
microsoft_graph_get_skype_for_business_organizer_activity_user_counts_with_period_request_builder = lazy_import('msgraph.generated.reports.microsoft_graph_get_skype_for_business_organizer_activity_user_counts_with_period.microsoft_graph_get_skype_for_business_organizer_activity_user_counts_with_period_request_builder')
microsoft_graph_get_skype_for_business_participant_activity_counts_with_period_request_builder = lazy_import('msgraph.generated.reports.microsoft_graph_get_skype_for_business_participant_activity_counts_with_period.microsoft_graph_get_skype_for_business_participant_activity_counts_with_period_request_builder')
microsoft_graph_get_skype_for_business_participant_activity_minute_counts_with_period_request_builder = lazy_import('msgraph.generated.reports.microsoft_graph_get_skype_for_business_participant_activity_minute_counts_with_period.microsoft_graph_get_skype_for_business_participant_activity_minute_counts_with_period_request_builder')
microsoft_graph_get_skype_for_business_participant_activity_user_counts_with_period_request_builder = lazy_import('msgraph.generated.reports.microsoft_graph_get_skype_for_business_participant_activity_user_counts_with_period.microsoft_graph_get_skype_for_business_participant_activity_user_counts_with_period_request_builder')
microsoft_graph_get_skype_for_business_peer_to_peer_activity_counts_with_period_request_builder = lazy_import('msgraph.generated.reports.microsoft_graph_get_skype_for_business_peer_to_peer_activity_counts_with_period.microsoft_graph_get_skype_for_business_peer_to_peer_activity_counts_with_period_request_builder')
microsoft_graph_get_skype_for_business_peer_to_peer_activity_minute_counts_with_period_request_builder = lazy_import('msgraph.generated.reports.microsoft_graph_get_skype_for_business_peer_to_peer_activity_minute_counts_with_period.microsoft_graph_get_skype_for_business_peer_to_peer_activity_minute_counts_with_period_request_builder')
microsoft_graph_get_skype_for_business_peer_to_peer_activity_user_counts_with_period_request_builder = lazy_import('msgraph.generated.reports.microsoft_graph_get_skype_for_business_peer_to_peer_activity_user_counts_with_period.microsoft_graph_get_skype_for_business_peer_to_peer_activity_user_counts_with_period_request_builder')
microsoft_graph_get_teams_device_usage_distribution_user_counts_with_period_request_builder = lazy_import('msgraph.generated.reports.microsoft_graph_get_teams_device_usage_distribution_user_counts_with_period.microsoft_graph_get_teams_device_usage_distribution_user_counts_with_period_request_builder')
microsoft_graph_get_teams_device_usage_user_counts_with_period_request_builder = lazy_import('msgraph.generated.reports.microsoft_graph_get_teams_device_usage_user_counts_with_period.microsoft_graph_get_teams_device_usage_user_counts_with_period_request_builder')
microsoft_graph_get_teams_device_usage_user_detail_with_date_request_builder = lazy_import('msgraph.generated.reports.microsoft_graph_get_teams_device_usage_user_detail_with_date.microsoft_graph_get_teams_device_usage_user_detail_with_date_request_builder')
microsoft_graph_get_teams_device_usage_user_detail_with_period_request_builder = lazy_import('msgraph.generated.reports.microsoft_graph_get_teams_device_usage_user_detail_with_period.microsoft_graph_get_teams_device_usage_user_detail_with_period_request_builder')
microsoft_graph_get_teams_user_activity_counts_with_period_request_builder = lazy_import('msgraph.generated.reports.microsoft_graph_get_teams_user_activity_counts_with_period.microsoft_graph_get_teams_user_activity_counts_with_period_request_builder')
microsoft_graph_get_teams_user_activity_user_counts_with_period_request_builder = lazy_import('msgraph.generated.reports.microsoft_graph_get_teams_user_activity_user_counts_with_period.microsoft_graph_get_teams_user_activity_user_counts_with_period_request_builder')
microsoft_graph_get_teams_user_activity_user_detail_with_date_request_builder = lazy_import('msgraph.generated.reports.microsoft_graph_get_teams_user_activity_user_detail_with_date.microsoft_graph_get_teams_user_activity_user_detail_with_date_request_builder')
microsoft_graph_get_teams_user_activity_user_detail_with_period_request_builder = lazy_import('msgraph.generated.reports.microsoft_graph_get_teams_user_activity_user_detail_with_period.microsoft_graph_get_teams_user_activity_user_detail_with_period_request_builder')
microsoft_graph_get_user_archived_print_jobs_with_user_id_with_start_date_time_with_end_date_time_request_builder = lazy_import('msgraph.generated.reports.microsoft_graph_get_user_archived_print_jobs_with_user_id_with_start_date_time_with_end_date_time.microsoft_graph_get_user_archived_print_jobs_with_user_id_with_start_date_time_with_end_date_time_request_builder')
microsoft_graph_get_yammer_activity_counts_with_period_request_builder = lazy_import('msgraph.generated.reports.microsoft_graph_get_yammer_activity_counts_with_period.microsoft_graph_get_yammer_activity_counts_with_period_request_builder')
microsoft_graph_get_yammer_activity_user_counts_with_period_request_builder = lazy_import('msgraph.generated.reports.microsoft_graph_get_yammer_activity_user_counts_with_period.microsoft_graph_get_yammer_activity_user_counts_with_period_request_builder')
microsoft_graph_get_yammer_activity_user_detail_with_date_request_builder = lazy_import('msgraph.generated.reports.microsoft_graph_get_yammer_activity_user_detail_with_date.microsoft_graph_get_yammer_activity_user_detail_with_date_request_builder')
microsoft_graph_get_yammer_activity_user_detail_with_period_request_builder = lazy_import('msgraph.generated.reports.microsoft_graph_get_yammer_activity_user_detail_with_period.microsoft_graph_get_yammer_activity_user_detail_with_period_request_builder')
microsoft_graph_get_yammer_device_usage_distribution_user_counts_with_period_request_builder = lazy_import('msgraph.generated.reports.microsoft_graph_get_yammer_device_usage_distribution_user_counts_with_period.microsoft_graph_get_yammer_device_usage_distribution_user_counts_with_period_request_builder')
microsoft_graph_get_yammer_device_usage_user_counts_with_period_request_builder = lazy_import('msgraph.generated.reports.microsoft_graph_get_yammer_device_usage_user_counts_with_period.microsoft_graph_get_yammer_device_usage_user_counts_with_period_request_builder')
microsoft_graph_get_yammer_device_usage_user_detail_with_date_request_builder = lazy_import('msgraph.generated.reports.microsoft_graph_get_yammer_device_usage_user_detail_with_date.microsoft_graph_get_yammer_device_usage_user_detail_with_date_request_builder')
microsoft_graph_get_yammer_device_usage_user_detail_with_period_request_builder = lazy_import('msgraph.generated.reports.microsoft_graph_get_yammer_device_usage_user_detail_with_period.microsoft_graph_get_yammer_device_usage_user_detail_with_period_request_builder')
microsoft_graph_get_yammer_groups_activity_counts_with_period_request_builder = lazy_import('msgraph.generated.reports.microsoft_graph_get_yammer_groups_activity_counts_with_period.microsoft_graph_get_yammer_groups_activity_counts_with_period_request_builder')
microsoft_graph_get_yammer_groups_activity_detail_with_date_request_builder = lazy_import('msgraph.generated.reports.microsoft_graph_get_yammer_groups_activity_detail_with_date.microsoft_graph_get_yammer_groups_activity_detail_with_date_request_builder')
microsoft_graph_get_yammer_groups_activity_detail_with_period_request_builder = lazy_import('msgraph.generated.reports.microsoft_graph_get_yammer_groups_activity_detail_with_period.microsoft_graph_get_yammer_groups_activity_detail_with_period_request_builder')
microsoft_graph_get_yammer_groups_activity_group_counts_with_period_request_builder = lazy_import('msgraph.generated.reports.microsoft_graph_get_yammer_groups_activity_group_counts_with_period.microsoft_graph_get_yammer_groups_activity_group_counts_with_period_request_builder')
microsoft_graph_managed_device_enrollment_failure_details_request_builder = lazy_import('msgraph.generated.reports.microsoft_graph_managed_device_enrollment_failure_details.microsoft_graph_managed_device_enrollment_failure_details_request_builder')
microsoft_graph_managed_device_enrollment_failure_details_with_skip_with_top_with_filter_with_skip_token_request_builder = lazy_import('msgraph.generated.reports.microsoft_graph_managed_device_enrollment_failure_details_with_skip_with_top_with_filter_with_skip_token.microsoft_graph_managed_device_enrollment_failure_details_with_skip_with_top_with_filter_with_skip_token_request_builder')
microsoft_graph_managed_device_enrollment_top_failures_request_builder = lazy_import('msgraph.generated.reports.microsoft_graph_managed_device_enrollment_top_failures.microsoft_graph_managed_device_enrollment_top_failures_request_builder')
microsoft_graph_managed_device_enrollment_top_failures_with_period_request_builder = lazy_import('msgraph.generated.reports.microsoft_graph_managed_device_enrollment_top_failures_with_period.microsoft_graph_managed_device_enrollment_top_failures_with_period_request_builder')
monthly_print_usage_by_printer_request_builder = lazy_import('msgraph.generated.reports.monthly_print_usage_by_printer.monthly_print_usage_by_printer_request_builder')
print_usage_by_printer_item_request_builder = lazy_import('msgraph.generated.reports.monthly_print_usage_by_printer.item.print_usage_by_printer_item_request_builder')
monthly_print_usage_by_user_request_builder = lazy_import('msgraph.generated.reports.monthly_print_usage_by_user.monthly_print_usage_by_user_request_builder')
print_usage_by_user_item_request_builder = lazy_import('msgraph.generated.reports.monthly_print_usage_by_user.item.print_usage_by_user_item_request_builder')
security_request_builder = lazy_import('msgraph.generated.reports.security.security_request_builder')

class ReportsRequestBuilder():
    """
    Provides operations to manage the reportRoot singleton.
    """
    @property
    def daily_print_usage_by_printer(self) -> daily_print_usage_by_printer_request_builder.DailyPrintUsageByPrinterRequestBuilder:
        """
        Provides operations to manage the dailyPrintUsageByPrinter property of the microsoft.graph.reportRoot entity.
        """
        return daily_print_usage_by_printer_request_builder.DailyPrintUsageByPrinterRequestBuilder(self.request_adapter, self.path_parameters)
    
    @property
    def daily_print_usage_by_user(self) -> daily_print_usage_by_user_request_builder.DailyPrintUsageByUserRequestBuilder:
        """
        Provides operations to manage the dailyPrintUsageByUser property of the microsoft.graph.reportRoot entity.
        """
        return daily_print_usage_by_user_request_builder.DailyPrintUsageByUserRequestBuilder(self.request_adapter, self.path_parameters)
    
    @property
    def microsoft_graph_device_configuration_device_activity(self) -> microsoft_graph_device_configuration_device_activity_request_builder.MicrosoftGraphDeviceConfigurationDeviceActivityRequestBuilder:
        """
        Provides operations to call the deviceConfigurationDeviceActivity method.
        """
        return microsoft_graph_device_configuration_device_activity_request_builder.MicrosoftGraphDeviceConfigurationDeviceActivityRequestBuilder(self.request_adapter, self.path_parameters)
    
    @property
    def microsoft_graph_device_configuration_user_activity(self) -> microsoft_graph_device_configuration_user_activity_request_builder.MicrosoftGraphDeviceConfigurationUserActivityRequestBuilder:
        """
        Provides operations to call the deviceConfigurationUserActivity method.
        """
        return microsoft_graph_device_configuration_user_activity_request_builder.MicrosoftGraphDeviceConfigurationUserActivityRequestBuilder(self.request_adapter, self.path_parameters)
    
    @property
    def microsoft_graph_get_office365_activation_counts(self) -> microsoft_graph_get_office365_activation_counts_request_builder.MicrosoftGraphGetOffice365ActivationCountsRequestBuilder:
        """
        Provides operations to call the getOffice365ActivationCounts method.
        """
        return microsoft_graph_get_office365_activation_counts_request_builder.MicrosoftGraphGetOffice365ActivationCountsRequestBuilder(self.request_adapter, self.path_parameters)
    
    @property
    def microsoft_graph_get_office365_activations_user_counts(self) -> microsoft_graph_get_office365_activations_user_counts_request_builder.MicrosoftGraphGetOffice365ActivationsUserCountsRequestBuilder:
        """
        Provides operations to call the getOffice365ActivationsUserCounts method.
        """
        return microsoft_graph_get_office365_activations_user_counts_request_builder.MicrosoftGraphGetOffice365ActivationsUserCountsRequestBuilder(self.request_adapter, self.path_parameters)
    
    @property
    def microsoft_graph_get_office365_activations_user_detail(self) -> microsoft_graph_get_office365_activations_user_detail_request_builder.MicrosoftGraphGetOffice365ActivationsUserDetailRequestBuilder:
        """
        Provides operations to call the getOffice365ActivationsUserDetail method.
        """
        return microsoft_graph_get_office365_activations_user_detail_request_builder.MicrosoftGraphGetOffice365ActivationsUserDetailRequestBuilder(self.request_adapter, self.path_parameters)
    
    @property
    def microsoft_graph_managed_device_enrollment_failure_details(self) -> microsoft_graph_managed_device_enrollment_failure_details_request_builder.MicrosoftGraphManagedDeviceEnrollmentFailureDetailsRequestBuilder:
        """
        Provides operations to call the managedDeviceEnrollmentFailureDetails method.
        """
        return microsoft_graph_managed_device_enrollment_failure_details_request_builder.MicrosoftGraphManagedDeviceEnrollmentFailureDetailsRequestBuilder(self.request_adapter, self.path_parameters)
    
    @property
    def microsoft_graph_managed_device_enrollment_top_failures(self) -> microsoft_graph_managed_device_enrollment_top_failures_request_builder.MicrosoftGraphManagedDeviceEnrollmentTopFailuresRequestBuilder:
        """
        Provides operations to call the managedDeviceEnrollmentTopFailures method.
        """
        return microsoft_graph_managed_device_enrollment_top_failures_request_builder.MicrosoftGraphManagedDeviceEnrollmentTopFailuresRequestBuilder(self.request_adapter, self.path_parameters)
    
    @property
    def monthly_print_usage_by_printer(self) -> monthly_print_usage_by_printer_request_builder.MonthlyPrintUsageByPrinterRequestBuilder:
        """
        Provides operations to manage the monthlyPrintUsageByPrinter property of the microsoft.graph.reportRoot entity.
        """
        return monthly_print_usage_by_printer_request_builder.MonthlyPrintUsageByPrinterRequestBuilder(self.request_adapter, self.path_parameters)
    
    @property
    def monthly_print_usage_by_user(self) -> monthly_print_usage_by_user_request_builder.MonthlyPrintUsageByUserRequestBuilder:
        """
        Provides operations to manage the monthlyPrintUsageByUser property of the microsoft.graph.reportRoot entity.
        """
        return monthly_print_usage_by_user_request_builder.MonthlyPrintUsageByUserRequestBuilder(self.request_adapter, self.path_parameters)
    
    @property
    def security(self) -> security_request_builder.SecurityRequestBuilder:
        """
        Provides operations to manage the security property of the microsoft.graph.reportRoot entity.
        """
        return security_request_builder.SecurityRequestBuilder(self.request_adapter, self.path_parameters)
    
    def __init__(self,request_adapter: RequestAdapter, path_parameters: Optional[Union[Dict[str, Any], str]] = None) -> None:
        """
        Instantiates a new ReportsRequestBuilder and sets the default values.
        Args:
            pathParameters: The raw url or the Url template parameters for the request.
            requestAdapter: The request adapter to use to execute the requests.
        """
        if path_parameters is None:
            raise Exception("path_parameters cannot be undefined")
        if request_adapter is None:
            raise Exception("request_adapter cannot be undefined")
        # Url template to use to build the URL for the current request builder
        self.url_template: str = "{+baseurl}/reports{?%24select,%24expand}"

        url_tpl_params = get_path_parameters(path_parameters)
        self.path_parameters = url_tpl_params
        self.request_adapter = request_adapter
    
    def daily_print_usage_by_printer_by_id(self,id: str) -> print_usage_by_printer_item_request_builder.PrintUsageByPrinterItemRequestBuilder:
        """
        Provides operations to manage the dailyPrintUsageByPrinter property of the microsoft.graph.reportRoot entity.
        Args:
            id: Unique identifier of the item
        Returns: print_usage_by_printer_item_request_builder.PrintUsageByPrinterItemRequestBuilder
        """
        if id is None:
            raise Exception("id cannot be undefined")
        url_tpl_params = get_path_parameters(self.path_parameters)
        url_tpl_params["printUsageByPrinter%2Did"] = id
        return print_usage_by_printer_item_request_builder.PrintUsageByPrinterItemRequestBuilder(self.request_adapter, url_tpl_params)
    
    def daily_print_usage_by_user_by_id(self,id: str) -> print_usage_by_user_item_request_builder.PrintUsageByUserItemRequestBuilder:
        """
        Provides operations to manage the dailyPrintUsageByUser property of the microsoft.graph.reportRoot entity.
        Args:
            id: Unique identifier of the item
        Returns: print_usage_by_user_item_request_builder.PrintUsageByUserItemRequestBuilder
        """
        if id is None:
            raise Exception("id cannot be undefined")
        url_tpl_params = get_path_parameters(self.path_parameters)
        url_tpl_params["printUsageByUser%2Did"] = id
        return print_usage_by_user_item_request_builder.PrintUsageByUserItemRequestBuilder(self.request_adapter, url_tpl_params)
    
    async def get(self,request_configuration: Optional[ReportsRequestBuilderGetRequestConfiguration] = None) -> Optional[report_root.ReportRoot]:
        """
        Get reports
        Args:
            requestConfiguration: Configuration for the request such as headers, query parameters, and middleware options.
        Returns: Optional[report_root.ReportRoot]
        """
        request_info = self.to_get_request_information(
            request_configuration
        )
        error_mapping: Dict[str, ParsableFactory] = {
            "4XX": o_data_error.ODataError,
            "5XX": o_data_error.ODataError,
        }
        if not self.request_adapter:
            raise Exception("Http core is null") 
        return await self.request_adapter.send_async(request_info, report_root.ReportRoot, error_mapping)
    
    def microsoft_graph_get_email_activity_counts_with_period(self,period: Optional[str] = None) -> microsoft_graph_get_email_activity_counts_with_period_request_builder.MicrosoftGraphGetEmailActivityCountsWithPeriodRequestBuilder:
        """
        Provides operations to call the getEmailActivityCounts method.
        Args:
            period: Usage: period='{period}'
        Returns: microsoft_graph_get_email_activity_counts_with_period_request_builder.MicrosoftGraphGetEmailActivityCountsWithPeriodRequestBuilder
        """
        if period is None:
            raise Exception("period cannot be undefined")
        return microsoft_graph_get_email_activity_counts_with_period_request_builder.MicrosoftGraphGetEmailActivityCountsWithPeriodRequestBuilder(self.request_adapter, self.path_parameters, period)
    
    def microsoft_graph_get_email_activity_user_counts_with_period(self,period: Optional[str] = None) -> microsoft_graph_get_email_activity_user_counts_with_period_request_builder.MicrosoftGraphGetEmailActivityUserCountsWithPeriodRequestBuilder:
        """
        Provides operations to call the getEmailActivityUserCounts method.
        Args:
            period: Usage: period='{period}'
        Returns: microsoft_graph_get_email_activity_user_counts_with_period_request_builder.MicrosoftGraphGetEmailActivityUserCountsWithPeriodRequestBuilder
        """
        if period is None:
            raise Exception("period cannot be undefined")
        return microsoft_graph_get_email_activity_user_counts_with_period_request_builder.MicrosoftGraphGetEmailActivityUserCountsWithPeriodRequestBuilder(self.request_adapter, self.path_parameters, period)
    
    def microsoft_graph_get_email_activity_user_detail_with_date(self,date: Optional[Date] = None) -> microsoft_graph_get_email_activity_user_detail_with_date_request_builder.MicrosoftGraphGetEmailActivityUserDetailWithDateRequestBuilder:
        """
        Provides operations to call the getEmailActivityUserDetail method.
        Args:
            date: Usage: date={date}
        Returns: microsoft_graph_get_email_activity_user_detail_with_date_request_builder.MicrosoftGraphGetEmailActivityUserDetailWithDateRequestBuilder
        """
        if date is None:
            raise Exception("date cannot be undefined")
        return microsoft_graph_get_email_activity_user_detail_with_date_request_builder.MicrosoftGraphGetEmailActivityUserDetailWithDateRequestBuilder(self.request_adapter, self.path_parameters, date)
    
    def microsoft_graph_get_email_activity_user_detail_with_period(self,period: Optional[str] = None) -> microsoft_graph_get_email_activity_user_detail_with_period_request_builder.MicrosoftGraphGetEmailActivityUserDetailWithPeriodRequestBuilder:
        """
        Provides operations to call the getEmailActivityUserDetail method.
        Args:
            period: Usage: period='{period}'
        Returns: microsoft_graph_get_email_activity_user_detail_with_period_request_builder.MicrosoftGraphGetEmailActivityUserDetailWithPeriodRequestBuilder
        """
        if period is None:
            raise Exception("period cannot be undefined")
        return microsoft_graph_get_email_activity_user_detail_with_period_request_builder.MicrosoftGraphGetEmailActivityUserDetailWithPeriodRequestBuilder(self.request_adapter, self.path_parameters, period)
    
    def microsoft_graph_get_email_app_usage_apps_user_counts_with_period(self,period: Optional[str] = None) -> microsoft_graph_get_email_app_usage_apps_user_counts_with_period_request_builder.MicrosoftGraphGetEmailAppUsageAppsUserCountsWithPeriodRequestBuilder:
        """
        Provides operations to call the getEmailAppUsageAppsUserCounts method.
        Args:
            period: Usage: period='{period}'
        Returns: microsoft_graph_get_email_app_usage_apps_user_counts_with_period_request_builder.MicrosoftGraphGetEmailAppUsageAppsUserCountsWithPeriodRequestBuilder
        """
        if period is None:
            raise Exception("period cannot be undefined")
        return microsoft_graph_get_email_app_usage_apps_user_counts_with_period_request_builder.MicrosoftGraphGetEmailAppUsageAppsUserCountsWithPeriodRequestBuilder(self.request_adapter, self.path_parameters, period)
    
    def microsoft_graph_get_email_app_usage_user_counts_with_period(self,period: Optional[str] = None) -> microsoft_graph_get_email_app_usage_user_counts_with_period_request_builder.MicrosoftGraphGetEmailAppUsageUserCountsWithPeriodRequestBuilder:
        """
        Provides operations to call the getEmailAppUsageUserCounts method.
        Args:
            period: Usage: period='{period}'
        Returns: microsoft_graph_get_email_app_usage_user_counts_with_period_request_builder.MicrosoftGraphGetEmailAppUsageUserCountsWithPeriodRequestBuilder
        """
        if period is None:
            raise Exception("period cannot be undefined")
        return microsoft_graph_get_email_app_usage_user_counts_with_period_request_builder.MicrosoftGraphGetEmailAppUsageUserCountsWithPeriodRequestBuilder(self.request_adapter, self.path_parameters, period)
    
    def microsoft_graph_get_email_app_usage_user_detail_with_date(self,date: Optional[Date] = None) -> microsoft_graph_get_email_app_usage_user_detail_with_date_request_builder.MicrosoftGraphGetEmailAppUsageUserDetailWithDateRequestBuilder:
        """
        Provides operations to call the getEmailAppUsageUserDetail method.
        Args:
            date: Usage: date={date}
        Returns: microsoft_graph_get_email_app_usage_user_detail_with_date_request_builder.MicrosoftGraphGetEmailAppUsageUserDetailWithDateRequestBuilder
        """
        if date is None:
            raise Exception("date cannot be undefined")
        return microsoft_graph_get_email_app_usage_user_detail_with_date_request_builder.MicrosoftGraphGetEmailAppUsageUserDetailWithDateRequestBuilder(self.request_adapter, self.path_parameters, date)
    
    def microsoft_graph_get_email_app_usage_user_detail_with_period(self,period: Optional[str] = None) -> microsoft_graph_get_email_app_usage_user_detail_with_period_request_builder.MicrosoftGraphGetEmailAppUsageUserDetailWithPeriodRequestBuilder:
        """
        Provides operations to call the getEmailAppUsageUserDetail method.
        Args:
            period: Usage: period='{period}'
        Returns: microsoft_graph_get_email_app_usage_user_detail_with_period_request_builder.MicrosoftGraphGetEmailAppUsageUserDetailWithPeriodRequestBuilder
        """
        if period is None:
            raise Exception("period cannot be undefined")
        return microsoft_graph_get_email_app_usage_user_detail_with_period_request_builder.MicrosoftGraphGetEmailAppUsageUserDetailWithPeriodRequestBuilder(self.request_adapter, self.path_parameters, period)
    
    def microsoft_graph_get_email_app_usage_versions_user_counts_with_period(self,period: Optional[str] = None) -> microsoft_graph_get_email_app_usage_versions_user_counts_with_period_request_builder.MicrosoftGraphGetEmailAppUsageVersionsUserCountsWithPeriodRequestBuilder:
        """
        Provides operations to call the getEmailAppUsageVersionsUserCounts method.
        Args:
            period: Usage: period='{period}'
        Returns: microsoft_graph_get_email_app_usage_versions_user_counts_with_period_request_builder.MicrosoftGraphGetEmailAppUsageVersionsUserCountsWithPeriodRequestBuilder
        """
        if period is None:
            raise Exception("period cannot be undefined")
        return microsoft_graph_get_email_app_usage_versions_user_counts_with_period_request_builder.MicrosoftGraphGetEmailAppUsageVersionsUserCountsWithPeriodRequestBuilder(self.request_adapter, self.path_parameters, period)
    
    def microsoft_graph_get_group_archived_print_jobs_with_group_id_with_start_date_time_with_end_date_time(self,end_date_time: Optional[datetime] = None, group_id: Optional[str] = None, start_date_time: Optional[datetime] = None) -> microsoft_graph_get_group_archived_print_jobs_with_group_id_with_start_date_time_with_end_date_time_request_builder.MicrosoftGraphGetGroupArchivedPrintJobsWithGroupIdWithStartDateTimeWithEndDateTimeRequestBuilder:
        """
        Provides operations to call the getGroupArchivedPrintJobs method.
        Args:
            endDateTime: Usage: endDateTime={endDateTime}
            groupId: Usage: groupId='{groupId}'
            startDateTime: Usage: startDateTime={startDateTime}
        Returns: microsoft_graph_get_group_archived_print_jobs_with_group_id_with_start_date_time_with_end_date_time_request_builder.MicrosoftGraphGetGroupArchivedPrintJobsWithGroupIdWithStartDateTimeWithEndDateTimeRequestBuilder
        """
        if end_date_time is None:
            raise Exception("end_date_time cannot be undefined")
        if group_id is None:
            raise Exception("group_id cannot be undefined")
        if start_date_time is None:
            raise Exception("start_date_time cannot be undefined")
        return microsoft_graph_get_group_archived_print_jobs_with_group_id_with_start_date_time_with_end_date_time_request_builder.MicrosoftGraphGetGroupArchivedPrintJobsWithGroupIdWithStartDateTimeWithEndDateTimeRequestBuilder(self.request_adapter, self.path_parameters, endDateTime, groupId, startDateTime)
    
    def microsoft_graph_get_m365_app_platform_user_counts_with_period(self,period: Optional[str] = None) -> microsoft_graph_get_m365_app_platform_user_counts_with_period_request_builder.MicrosoftGraphGetM365AppPlatformUserCountsWithPeriodRequestBuilder:
        """
        Provides operations to call the getM365AppPlatformUserCounts method.
        Args:
            period: Usage: period='{period}'
        Returns: microsoft_graph_get_m365_app_platform_user_counts_with_period_request_builder.MicrosoftGraphGetM365AppPlatformUserCountsWithPeriodRequestBuilder
        """
        if period is None:
            raise Exception("period cannot be undefined")
        return microsoft_graph_get_m365_app_platform_user_counts_with_period_request_builder.MicrosoftGraphGetM365AppPlatformUserCountsWithPeriodRequestBuilder(self.request_adapter, self.path_parameters, period)
    
    def microsoft_graph_get_m365_app_user_counts_with_period(self,period: Optional[str] = None) -> microsoft_graph_get_m365_app_user_counts_with_period_request_builder.MicrosoftGraphGetM365AppUserCountsWithPeriodRequestBuilder:
        """
        Provides operations to call the getM365AppUserCounts method.
        Args:
            period: Usage: period='{period}'
        Returns: microsoft_graph_get_m365_app_user_counts_with_period_request_builder.MicrosoftGraphGetM365AppUserCountsWithPeriodRequestBuilder
        """
        if period is None:
            raise Exception("period cannot be undefined")
        return microsoft_graph_get_m365_app_user_counts_with_period_request_builder.MicrosoftGraphGetM365AppUserCountsWithPeriodRequestBuilder(self.request_adapter, self.path_parameters, period)
    
    def microsoft_graph_get_m365_app_user_detail_with_date(self,date: Optional[Date] = None) -> microsoft_graph_get_m365_app_user_detail_with_date_request_builder.MicrosoftGraphGetM365AppUserDetailWithDateRequestBuilder:
        """
        Provides operations to call the getM365AppUserDetail method.
        Args:
            date: Usage: date={date}
        Returns: microsoft_graph_get_m365_app_user_detail_with_date_request_builder.MicrosoftGraphGetM365AppUserDetailWithDateRequestBuilder
        """
        if date is None:
            raise Exception("date cannot be undefined")
        return microsoft_graph_get_m365_app_user_detail_with_date_request_builder.MicrosoftGraphGetM365AppUserDetailWithDateRequestBuilder(self.request_adapter, self.path_parameters, date)
    
    def microsoft_graph_get_m365_app_user_detail_with_period(self,period: Optional[str] = None) -> microsoft_graph_get_m365_app_user_detail_with_period_request_builder.MicrosoftGraphGetM365AppUserDetailWithPeriodRequestBuilder:
        """
        Provides operations to call the getM365AppUserDetail method.
        Args:
            period: Usage: period='{period}'
        Returns: microsoft_graph_get_m365_app_user_detail_with_period_request_builder.MicrosoftGraphGetM365AppUserDetailWithPeriodRequestBuilder
        """
        if period is None:
            raise Exception("period cannot be undefined")
        return microsoft_graph_get_m365_app_user_detail_with_period_request_builder.MicrosoftGraphGetM365AppUserDetailWithPeriodRequestBuilder(self.request_adapter, self.path_parameters, period)
    
    def microsoft_graph_get_mailbox_usage_detail_with_period(self,period: Optional[str] = None) -> microsoft_graph_get_mailbox_usage_detail_with_period_request_builder.MicrosoftGraphGetMailboxUsageDetailWithPeriodRequestBuilder:
        """
        Provides operations to call the getMailboxUsageDetail method.
        Args:
            period: Usage: period='{period}'
        Returns: microsoft_graph_get_mailbox_usage_detail_with_period_request_builder.MicrosoftGraphGetMailboxUsageDetailWithPeriodRequestBuilder
        """
        if period is None:
            raise Exception("period cannot be undefined")
        return microsoft_graph_get_mailbox_usage_detail_with_period_request_builder.MicrosoftGraphGetMailboxUsageDetailWithPeriodRequestBuilder(self.request_adapter, self.path_parameters, period)
    
    def microsoft_graph_get_mailbox_usage_mailbox_counts_with_period(self,period: Optional[str] = None) -> microsoft_graph_get_mailbox_usage_mailbox_counts_with_period_request_builder.MicrosoftGraphGetMailboxUsageMailboxCountsWithPeriodRequestBuilder:
        """
        Provides operations to call the getMailboxUsageMailboxCounts method.
        Args:
            period: Usage: period='{period}'
        Returns: microsoft_graph_get_mailbox_usage_mailbox_counts_with_period_request_builder.MicrosoftGraphGetMailboxUsageMailboxCountsWithPeriodRequestBuilder
        """
        if period is None:
            raise Exception("period cannot be undefined")
        return microsoft_graph_get_mailbox_usage_mailbox_counts_with_period_request_builder.MicrosoftGraphGetMailboxUsageMailboxCountsWithPeriodRequestBuilder(self.request_adapter, self.path_parameters, period)
    
    def microsoft_graph_get_mailbox_usage_quota_status_mailbox_counts_with_period(self,period: Optional[str] = None) -> microsoft_graph_get_mailbox_usage_quota_status_mailbox_counts_with_period_request_builder.MicrosoftGraphGetMailboxUsageQuotaStatusMailboxCountsWithPeriodRequestBuilder:
        """
        Provides operations to call the getMailboxUsageQuotaStatusMailboxCounts method.
        Args:
            period: Usage: period='{period}'
        Returns: microsoft_graph_get_mailbox_usage_quota_status_mailbox_counts_with_period_request_builder.MicrosoftGraphGetMailboxUsageQuotaStatusMailboxCountsWithPeriodRequestBuilder
        """
        if period is None:
            raise Exception("period cannot be undefined")
        return microsoft_graph_get_mailbox_usage_quota_status_mailbox_counts_with_period_request_builder.MicrosoftGraphGetMailboxUsageQuotaStatusMailboxCountsWithPeriodRequestBuilder(self.request_adapter, self.path_parameters, period)
    
    def microsoft_graph_get_mailbox_usage_storage_with_period(self,period: Optional[str] = None) -> microsoft_graph_get_mailbox_usage_storage_with_period_request_builder.MicrosoftGraphGetMailboxUsageStorageWithPeriodRequestBuilder:
        """
        Provides operations to call the getMailboxUsageStorage method.
        Args:
            period: Usage: period='{period}'
        Returns: microsoft_graph_get_mailbox_usage_storage_with_period_request_builder.MicrosoftGraphGetMailboxUsageStorageWithPeriodRequestBuilder
        """
        if period is None:
            raise Exception("period cannot be undefined")
        return microsoft_graph_get_mailbox_usage_storage_with_period_request_builder.MicrosoftGraphGetMailboxUsageStorageWithPeriodRequestBuilder(self.request_adapter, self.path_parameters, period)
    
    def microsoft_graph_get_office365_active_user_counts_with_period(self,period: Optional[str] = None) -> microsoft_graph_get_office365_active_user_counts_with_period_request_builder.MicrosoftGraphGetOffice365ActiveUserCountsWithPeriodRequestBuilder:
        """
        Provides operations to call the getOffice365ActiveUserCounts method.
        Args:
            period: Usage: period='{period}'
        Returns: microsoft_graph_get_office365_active_user_counts_with_period_request_builder.MicrosoftGraphGetOffice365ActiveUserCountsWithPeriodRequestBuilder
        """
        if period is None:
            raise Exception("period cannot be undefined")
        return microsoft_graph_get_office365_active_user_counts_with_period_request_builder.MicrosoftGraphGetOffice365ActiveUserCountsWithPeriodRequestBuilder(self.request_adapter, self.path_parameters, period)
    
    def microsoft_graph_get_office365_active_user_detail_with_date(self,date: Optional[Date] = None) -> microsoft_graph_get_office365_active_user_detail_with_date_request_builder.MicrosoftGraphGetOffice365ActiveUserDetailWithDateRequestBuilder:
        """
        Provides operations to call the getOffice365ActiveUserDetail method.
        Args:
            date: Usage: date={date}
        Returns: microsoft_graph_get_office365_active_user_detail_with_date_request_builder.MicrosoftGraphGetOffice365ActiveUserDetailWithDateRequestBuilder
        """
        if date is None:
            raise Exception("date cannot be undefined")
        return microsoft_graph_get_office365_active_user_detail_with_date_request_builder.MicrosoftGraphGetOffice365ActiveUserDetailWithDateRequestBuilder(self.request_adapter, self.path_parameters, date)
    
    def microsoft_graph_get_office365_active_user_detail_with_period(self,period: Optional[str] = None) -> microsoft_graph_get_office365_active_user_detail_with_period_request_builder.MicrosoftGraphGetOffice365ActiveUserDetailWithPeriodRequestBuilder:
        """
        Provides operations to call the getOffice365ActiveUserDetail method.
        Args:
            period: Usage: period='{period}'
        Returns: microsoft_graph_get_office365_active_user_detail_with_period_request_builder.MicrosoftGraphGetOffice365ActiveUserDetailWithPeriodRequestBuilder
        """
        if period is None:
            raise Exception("period cannot be undefined")
        return microsoft_graph_get_office365_active_user_detail_with_period_request_builder.MicrosoftGraphGetOffice365ActiveUserDetailWithPeriodRequestBuilder(self.request_adapter, self.path_parameters, period)
    
    def microsoft_graph_get_office365_groups_activity_counts_with_period(self,period: Optional[str] = None) -> microsoft_graph_get_office365_groups_activity_counts_with_period_request_builder.MicrosoftGraphGetOffice365GroupsActivityCountsWithPeriodRequestBuilder:
        """
        Provides operations to call the getOffice365GroupsActivityCounts method.
        Args:
            period: Usage: period='{period}'
        Returns: microsoft_graph_get_office365_groups_activity_counts_with_period_request_builder.MicrosoftGraphGetOffice365GroupsActivityCountsWithPeriodRequestBuilder
        """
        if period is None:
            raise Exception("period cannot be undefined")
        return microsoft_graph_get_office365_groups_activity_counts_with_period_request_builder.MicrosoftGraphGetOffice365GroupsActivityCountsWithPeriodRequestBuilder(self.request_adapter, self.path_parameters, period)
    
    def microsoft_graph_get_office365_groups_activity_detail_with_date(self,date: Optional[Date] = None) -> microsoft_graph_get_office365_groups_activity_detail_with_date_request_builder.MicrosoftGraphGetOffice365GroupsActivityDetailWithDateRequestBuilder:
        """
        Provides operations to call the getOffice365GroupsActivityDetail method.
        Args:
            date: Usage: date={date}
        Returns: microsoft_graph_get_office365_groups_activity_detail_with_date_request_builder.MicrosoftGraphGetOffice365GroupsActivityDetailWithDateRequestBuilder
        """
        if date is None:
            raise Exception("date cannot be undefined")
        return microsoft_graph_get_office365_groups_activity_detail_with_date_request_builder.MicrosoftGraphGetOffice365GroupsActivityDetailWithDateRequestBuilder(self.request_adapter, self.path_parameters, date)
    
    def microsoft_graph_get_office365_groups_activity_detail_with_period(self,period: Optional[str] = None) -> microsoft_graph_get_office365_groups_activity_detail_with_period_request_builder.MicrosoftGraphGetOffice365GroupsActivityDetailWithPeriodRequestBuilder:
        """
        Provides operations to call the getOffice365GroupsActivityDetail method.
        Args:
            period: Usage: period='{period}'
        Returns: microsoft_graph_get_office365_groups_activity_detail_with_period_request_builder.MicrosoftGraphGetOffice365GroupsActivityDetailWithPeriodRequestBuilder
        """
        if period is None:
            raise Exception("period cannot be undefined")
        return microsoft_graph_get_office365_groups_activity_detail_with_period_request_builder.MicrosoftGraphGetOffice365GroupsActivityDetailWithPeriodRequestBuilder(self.request_adapter, self.path_parameters, period)
    
    def microsoft_graph_get_office365_groups_activity_file_counts_with_period(self,period: Optional[str] = None) -> microsoft_graph_get_office365_groups_activity_file_counts_with_period_request_builder.MicrosoftGraphGetOffice365GroupsActivityFileCountsWithPeriodRequestBuilder:
        """
        Provides operations to call the getOffice365GroupsActivityFileCounts method.
        Args:
            period: Usage: period='{period}'
        Returns: microsoft_graph_get_office365_groups_activity_file_counts_with_period_request_builder.MicrosoftGraphGetOffice365GroupsActivityFileCountsWithPeriodRequestBuilder
        """
        if period is None:
            raise Exception("period cannot be undefined")
        return microsoft_graph_get_office365_groups_activity_file_counts_with_period_request_builder.MicrosoftGraphGetOffice365GroupsActivityFileCountsWithPeriodRequestBuilder(self.request_adapter, self.path_parameters, period)
    
    def microsoft_graph_get_office365_groups_activity_group_counts_with_period(self,period: Optional[str] = None) -> microsoft_graph_get_office365_groups_activity_group_counts_with_period_request_builder.MicrosoftGraphGetOffice365GroupsActivityGroupCountsWithPeriodRequestBuilder:
        """
        Provides operations to call the getOffice365GroupsActivityGroupCounts method.
        Args:
            period: Usage: period='{period}'
        Returns: microsoft_graph_get_office365_groups_activity_group_counts_with_period_request_builder.MicrosoftGraphGetOffice365GroupsActivityGroupCountsWithPeriodRequestBuilder
        """
        if period is None:
            raise Exception("period cannot be undefined")
        return microsoft_graph_get_office365_groups_activity_group_counts_with_period_request_builder.MicrosoftGraphGetOffice365GroupsActivityGroupCountsWithPeriodRequestBuilder(self.request_adapter, self.path_parameters, period)
    
    def microsoft_graph_get_office365_groups_activity_storage_with_period(self,period: Optional[str] = None) -> microsoft_graph_get_office365_groups_activity_storage_with_period_request_builder.MicrosoftGraphGetOffice365GroupsActivityStorageWithPeriodRequestBuilder:
        """
        Provides operations to call the getOffice365GroupsActivityStorage method.
        Args:
            period: Usage: period='{period}'
        Returns: microsoft_graph_get_office365_groups_activity_storage_with_period_request_builder.MicrosoftGraphGetOffice365GroupsActivityStorageWithPeriodRequestBuilder
        """
        if period is None:
            raise Exception("period cannot be undefined")
        return microsoft_graph_get_office365_groups_activity_storage_with_period_request_builder.MicrosoftGraphGetOffice365GroupsActivityStorageWithPeriodRequestBuilder(self.request_adapter, self.path_parameters, period)
    
    def microsoft_graph_get_office365_services_user_counts_with_period(self,period: Optional[str] = None) -> microsoft_graph_get_office365_services_user_counts_with_period_request_builder.MicrosoftGraphGetOffice365ServicesUserCountsWithPeriodRequestBuilder:
        """
        Provides operations to call the getOffice365ServicesUserCounts method.
        Args:
            period: Usage: period='{period}'
        Returns: microsoft_graph_get_office365_services_user_counts_with_period_request_builder.MicrosoftGraphGetOffice365ServicesUserCountsWithPeriodRequestBuilder
        """
        if period is None:
            raise Exception("period cannot be undefined")
        return microsoft_graph_get_office365_services_user_counts_with_period_request_builder.MicrosoftGraphGetOffice365ServicesUserCountsWithPeriodRequestBuilder(self.request_adapter, self.path_parameters, period)
    
    def microsoft_graph_get_one_drive_activity_file_counts_with_period(self,period: Optional[str] = None) -> microsoft_graph_get_one_drive_activity_file_counts_with_period_request_builder.MicrosoftGraphGetOneDriveActivityFileCountsWithPeriodRequestBuilder:
        """
        Provides operations to call the getOneDriveActivityFileCounts method.
        Args:
            period: Usage: period='{period}'
        Returns: microsoft_graph_get_one_drive_activity_file_counts_with_period_request_builder.MicrosoftGraphGetOneDriveActivityFileCountsWithPeriodRequestBuilder
        """
        if period is None:
            raise Exception("period cannot be undefined")
        return microsoft_graph_get_one_drive_activity_file_counts_with_period_request_builder.MicrosoftGraphGetOneDriveActivityFileCountsWithPeriodRequestBuilder(self.request_adapter, self.path_parameters, period)
    
    def microsoft_graph_get_one_drive_activity_user_counts_with_period(self,period: Optional[str] = None) -> microsoft_graph_get_one_drive_activity_user_counts_with_period_request_builder.MicrosoftGraphGetOneDriveActivityUserCountsWithPeriodRequestBuilder:
        """
        Provides operations to call the getOneDriveActivityUserCounts method.
        Args:
            period: Usage: period='{period}'
        Returns: microsoft_graph_get_one_drive_activity_user_counts_with_period_request_builder.MicrosoftGraphGetOneDriveActivityUserCountsWithPeriodRequestBuilder
        """
        if period is None:
            raise Exception("period cannot be undefined")
        return microsoft_graph_get_one_drive_activity_user_counts_with_period_request_builder.MicrosoftGraphGetOneDriveActivityUserCountsWithPeriodRequestBuilder(self.request_adapter, self.path_parameters, period)
    
    def microsoft_graph_get_one_drive_activity_user_detail_with_date(self,date: Optional[Date] = None) -> microsoft_graph_get_one_drive_activity_user_detail_with_date_request_builder.MicrosoftGraphGetOneDriveActivityUserDetailWithDateRequestBuilder:
        """
        Provides operations to call the getOneDriveActivityUserDetail method.
        Args:
            date: Usage: date={date}
        Returns: microsoft_graph_get_one_drive_activity_user_detail_with_date_request_builder.MicrosoftGraphGetOneDriveActivityUserDetailWithDateRequestBuilder
        """
        if date is None:
            raise Exception("date cannot be undefined")
        return microsoft_graph_get_one_drive_activity_user_detail_with_date_request_builder.MicrosoftGraphGetOneDriveActivityUserDetailWithDateRequestBuilder(self.request_adapter, self.path_parameters, date)
    
    def microsoft_graph_get_one_drive_activity_user_detail_with_period(self,period: Optional[str] = None) -> microsoft_graph_get_one_drive_activity_user_detail_with_period_request_builder.MicrosoftGraphGetOneDriveActivityUserDetailWithPeriodRequestBuilder:
        """
        Provides operations to call the getOneDriveActivityUserDetail method.
        Args:
            period: Usage: period='{period}'
        Returns: microsoft_graph_get_one_drive_activity_user_detail_with_period_request_builder.MicrosoftGraphGetOneDriveActivityUserDetailWithPeriodRequestBuilder
        """
        if period is None:
            raise Exception("period cannot be undefined")
        return microsoft_graph_get_one_drive_activity_user_detail_with_period_request_builder.MicrosoftGraphGetOneDriveActivityUserDetailWithPeriodRequestBuilder(self.request_adapter, self.path_parameters, period)
    
    def microsoft_graph_get_one_drive_usage_account_counts_with_period(self,period: Optional[str] = None) -> microsoft_graph_get_one_drive_usage_account_counts_with_period_request_builder.MicrosoftGraphGetOneDriveUsageAccountCountsWithPeriodRequestBuilder:
        """
        Provides operations to call the getOneDriveUsageAccountCounts method.
        Args:
            period: Usage: period='{period}'
        Returns: microsoft_graph_get_one_drive_usage_account_counts_with_period_request_builder.MicrosoftGraphGetOneDriveUsageAccountCountsWithPeriodRequestBuilder
        """
        if period is None:
            raise Exception("period cannot be undefined")
        return microsoft_graph_get_one_drive_usage_account_counts_with_period_request_builder.MicrosoftGraphGetOneDriveUsageAccountCountsWithPeriodRequestBuilder(self.request_adapter, self.path_parameters, period)
    
    def microsoft_graph_get_one_drive_usage_account_detail_with_date(self,date: Optional[Date] = None) -> microsoft_graph_get_one_drive_usage_account_detail_with_date_request_builder.MicrosoftGraphGetOneDriveUsageAccountDetailWithDateRequestBuilder:
        """
        Provides operations to call the getOneDriveUsageAccountDetail method.
        Args:
            date: Usage: date={date}
        Returns: microsoft_graph_get_one_drive_usage_account_detail_with_date_request_builder.MicrosoftGraphGetOneDriveUsageAccountDetailWithDateRequestBuilder
        """
        if date is None:
            raise Exception("date cannot be undefined")
        return microsoft_graph_get_one_drive_usage_account_detail_with_date_request_builder.MicrosoftGraphGetOneDriveUsageAccountDetailWithDateRequestBuilder(self.request_adapter, self.path_parameters, date)
    
    def microsoft_graph_get_one_drive_usage_account_detail_with_period(self,period: Optional[str] = None) -> microsoft_graph_get_one_drive_usage_account_detail_with_period_request_builder.MicrosoftGraphGetOneDriveUsageAccountDetailWithPeriodRequestBuilder:
        """
        Provides operations to call the getOneDriveUsageAccountDetail method.
        Args:
            period: Usage: period='{period}'
        Returns: microsoft_graph_get_one_drive_usage_account_detail_with_period_request_builder.MicrosoftGraphGetOneDriveUsageAccountDetailWithPeriodRequestBuilder
        """
        if period is None:
            raise Exception("period cannot be undefined")
        return microsoft_graph_get_one_drive_usage_account_detail_with_period_request_builder.MicrosoftGraphGetOneDriveUsageAccountDetailWithPeriodRequestBuilder(self.request_adapter, self.path_parameters, period)
    
    def microsoft_graph_get_one_drive_usage_file_counts_with_period(self,period: Optional[str] = None) -> microsoft_graph_get_one_drive_usage_file_counts_with_period_request_builder.MicrosoftGraphGetOneDriveUsageFileCountsWithPeriodRequestBuilder:
        """
        Provides operations to call the getOneDriveUsageFileCounts method.
        Args:
            period: Usage: period='{period}'
        Returns: microsoft_graph_get_one_drive_usage_file_counts_with_period_request_builder.MicrosoftGraphGetOneDriveUsageFileCountsWithPeriodRequestBuilder
        """
        if period is None:
            raise Exception("period cannot be undefined")
        return microsoft_graph_get_one_drive_usage_file_counts_with_period_request_builder.MicrosoftGraphGetOneDriveUsageFileCountsWithPeriodRequestBuilder(self.request_adapter, self.path_parameters, period)
    
    def microsoft_graph_get_one_drive_usage_storage_with_period(self,period: Optional[str] = None) -> microsoft_graph_get_one_drive_usage_storage_with_period_request_builder.MicrosoftGraphGetOneDriveUsageStorageWithPeriodRequestBuilder:
        """
        Provides operations to call the getOneDriveUsageStorage method.
        Args:
            period: Usage: period='{period}'
        Returns: microsoft_graph_get_one_drive_usage_storage_with_period_request_builder.MicrosoftGraphGetOneDriveUsageStorageWithPeriodRequestBuilder
        """
        if period is None:
            raise Exception("period cannot be undefined")
        return microsoft_graph_get_one_drive_usage_storage_with_period_request_builder.MicrosoftGraphGetOneDriveUsageStorageWithPeriodRequestBuilder(self.request_adapter, self.path_parameters, period)
    
    def microsoft_graph_get_printer_archived_print_jobs_with_printer_id_with_start_date_time_with_end_date_time(self,end_date_time: Optional[datetime] = None, printer_id: Optional[str] = None, start_date_time: Optional[datetime] = None) -> microsoft_graph_get_printer_archived_print_jobs_with_printer_id_with_start_date_time_with_end_date_time_request_builder.MicrosoftGraphGetPrinterArchivedPrintJobsWithPrinterIdWithStartDateTimeWithEndDateTimeRequestBuilder:
        """
        Provides operations to call the getPrinterArchivedPrintJobs method.
        Args:
            endDateTime: Usage: endDateTime={endDateTime}
            printerId: Usage: printerId='{printerId}'
            startDateTime: Usage: startDateTime={startDateTime}
        Returns: microsoft_graph_get_printer_archived_print_jobs_with_printer_id_with_start_date_time_with_end_date_time_request_builder.MicrosoftGraphGetPrinterArchivedPrintJobsWithPrinterIdWithStartDateTimeWithEndDateTimeRequestBuilder
        """
        if end_date_time is None:
            raise Exception("end_date_time cannot be undefined")
        if printer_id is None:
            raise Exception("printer_id cannot be undefined")
        if start_date_time is None:
            raise Exception("start_date_time cannot be undefined")
        return microsoft_graph_get_printer_archived_print_jobs_with_printer_id_with_start_date_time_with_end_date_time_request_builder.MicrosoftGraphGetPrinterArchivedPrintJobsWithPrinterIdWithStartDateTimeWithEndDateTimeRequestBuilder(self.request_adapter, self.path_parameters, endDateTime, printerId, startDateTime)
    
    def microsoft_graph_get_share_point_activity_file_counts_with_period(self,period: Optional[str] = None) -> microsoft_graph_get_share_point_activity_file_counts_with_period_request_builder.MicrosoftGraphGetSharePointActivityFileCountsWithPeriodRequestBuilder:
        """
        Provides operations to call the getSharePointActivityFileCounts method.
        Args:
            period: Usage: period='{period}'
        Returns: microsoft_graph_get_share_point_activity_file_counts_with_period_request_builder.MicrosoftGraphGetSharePointActivityFileCountsWithPeriodRequestBuilder
        """
        if period is None:
            raise Exception("period cannot be undefined")
        return microsoft_graph_get_share_point_activity_file_counts_with_period_request_builder.MicrosoftGraphGetSharePointActivityFileCountsWithPeriodRequestBuilder(self.request_adapter, self.path_parameters, period)
    
    def microsoft_graph_get_share_point_activity_pages_with_period(self,period: Optional[str] = None) -> microsoft_graph_get_share_point_activity_pages_with_period_request_builder.MicrosoftGraphGetSharePointActivityPagesWithPeriodRequestBuilder:
        """
        Provides operations to call the getSharePointActivityPages method.
        Args:
            period: Usage: period='{period}'
        Returns: microsoft_graph_get_share_point_activity_pages_with_period_request_builder.MicrosoftGraphGetSharePointActivityPagesWithPeriodRequestBuilder
        """
        if period is None:
            raise Exception("period cannot be undefined")
        return microsoft_graph_get_share_point_activity_pages_with_period_request_builder.MicrosoftGraphGetSharePointActivityPagesWithPeriodRequestBuilder(self.request_adapter, self.path_parameters, period)
    
    def microsoft_graph_get_share_point_activity_user_counts_with_period(self,period: Optional[str] = None) -> microsoft_graph_get_share_point_activity_user_counts_with_period_request_builder.MicrosoftGraphGetSharePointActivityUserCountsWithPeriodRequestBuilder:
        """
        Provides operations to call the getSharePointActivityUserCounts method.
        Args:
            period: Usage: period='{period}'
        Returns: microsoft_graph_get_share_point_activity_user_counts_with_period_request_builder.MicrosoftGraphGetSharePointActivityUserCountsWithPeriodRequestBuilder
        """
        if period is None:
            raise Exception("period cannot be undefined")
        return microsoft_graph_get_share_point_activity_user_counts_with_period_request_builder.MicrosoftGraphGetSharePointActivityUserCountsWithPeriodRequestBuilder(self.request_adapter, self.path_parameters, period)
    
    def microsoft_graph_get_share_point_activity_user_detail_with_date(self,date: Optional[Date] = None) -> microsoft_graph_get_share_point_activity_user_detail_with_date_request_builder.MicrosoftGraphGetSharePointActivityUserDetailWithDateRequestBuilder:
        """
        Provides operations to call the getSharePointActivityUserDetail method.
        Args:
            date: Usage: date={date}
        Returns: microsoft_graph_get_share_point_activity_user_detail_with_date_request_builder.MicrosoftGraphGetSharePointActivityUserDetailWithDateRequestBuilder
        """
        if date is None:
            raise Exception("date cannot be undefined")
        return microsoft_graph_get_share_point_activity_user_detail_with_date_request_builder.MicrosoftGraphGetSharePointActivityUserDetailWithDateRequestBuilder(self.request_adapter, self.path_parameters, date)
    
    def microsoft_graph_get_share_point_activity_user_detail_with_period(self,period: Optional[str] = None) -> microsoft_graph_get_share_point_activity_user_detail_with_period_request_builder.MicrosoftGraphGetSharePointActivityUserDetailWithPeriodRequestBuilder:
        """
        Provides operations to call the getSharePointActivityUserDetail method.
        Args:
            period: Usage: period='{period}'
        Returns: microsoft_graph_get_share_point_activity_user_detail_with_period_request_builder.MicrosoftGraphGetSharePointActivityUserDetailWithPeriodRequestBuilder
        """
        if period is None:
            raise Exception("period cannot be undefined")
        return microsoft_graph_get_share_point_activity_user_detail_with_period_request_builder.MicrosoftGraphGetSharePointActivityUserDetailWithPeriodRequestBuilder(self.request_adapter, self.path_parameters, period)
    
    def microsoft_graph_get_share_point_site_usage_detail_with_date(self,date: Optional[Date] = None) -> microsoft_graph_get_share_point_site_usage_detail_with_date_request_builder.MicrosoftGraphGetSharePointSiteUsageDetailWithDateRequestBuilder:
        """
        Provides operations to call the getSharePointSiteUsageDetail method.
        Args:
            date: Usage: date={date}
        Returns: microsoft_graph_get_share_point_site_usage_detail_with_date_request_builder.MicrosoftGraphGetSharePointSiteUsageDetailWithDateRequestBuilder
        """
        if date is None:
            raise Exception("date cannot be undefined")
        return microsoft_graph_get_share_point_site_usage_detail_with_date_request_builder.MicrosoftGraphGetSharePointSiteUsageDetailWithDateRequestBuilder(self.request_adapter, self.path_parameters, date)
    
    def microsoft_graph_get_share_point_site_usage_detail_with_period(self,period: Optional[str] = None) -> microsoft_graph_get_share_point_site_usage_detail_with_period_request_builder.MicrosoftGraphGetSharePointSiteUsageDetailWithPeriodRequestBuilder:
        """
        Provides operations to call the getSharePointSiteUsageDetail method.
        Args:
            period: Usage: period='{period}'
        Returns: microsoft_graph_get_share_point_site_usage_detail_with_period_request_builder.MicrosoftGraphGetSharePointSiteUsageDetailWithPeriodRequestBuilder
        """
        if period is None:
            raise Exception("period cannot be undefined")
        return microsoft_graph_get_share_point_site_usage_detail_with_period_request_builder.MicrosoftGraphGetSharePointSiteUsageDetailWithPeriodRequestBuilder(self.request_adapter, self.path_parameters, period)
    
    def microsoft_graph_get_share_point_site_usage_file_counts_with_period(self,period: Optional[str] = None) -> microsoft_graph_get_share_point_site_usage_file_counts_with_period_request_builder.MicrosoftGraphGetSharePointSiteUsageFileCountsWithPeriodRequestBuilder:
        """
        Provides operations to call the getSharePointSiteUsageFileCounts method.
        Args:
            period: Usage: period='{period}'
        Returns: microsoft_graph_get_share_point_site_usage_file_counts_with_period_request_builder.MicrosoftGraphGetSharePointSiteUsageFileCountsWithPeriodRequestBuilder
        """
        if period is None:
            raise Exception("period cannot be undefined")
        return microsoft_graph_get_share_point_site_usage_file_counts_with_period_request_builder.MicrosoftGraphGetSharePointSiteUsageFileCountsWithPeriodRequestBuilder(self.request_adapter, self.path_parameters, period)
    
    def microsoft_graph_get_share_point_site_usage_pages_with_period(self,period: Optional[str] = None) -> microsoft_graph_get_share_point_site_usage_pages_with_period_request_builder.MicrosoftGraphGetSharePointSiteUsagePagesWithPeriodRequestBuilder:
        """
        Provides operations to call the getSharePointSiteUsagePages method.
        Args:
            period: Usage: period='{period}'
        Returns: microsoft_graph_get_share_point_site_usage_pages_with_period_request_builder.MicrosoftGraphGetSharePointSiteUsagePagesWithPeriodRequestBuilder
        """
        if period is None:
            raise Exception("period cannot be undefined")
        return microsoft_graph_get_share_point_site_usage_pages_with_period_request_builder.MicrosoftGraphGetSharePointSiteUsagePagesWithPeriodRequestBuilder(self.request_adapter, self.path_parameters, period)
    
    def microsoft_graph_get_share_point_site_usage_site_counts_with_period(self,period: Optional[str] = None) -> microsoft_graph_get_share_point_site_usage_site_counts_with_period_request_builder.MicrosoftGraphGetSharePointSiteUsageSiteCountsWithPeriodRequestBuilder:
        """
        Provides operations to call the getSharePointSiteUsageSiteCounts method.
        Args:
            period: Usage: period='{period}'
        Returns: microsoft_graph_get_share_point_site_usage_site_counts_with_period_request_builder.MicrosoftGraphGetSharePointSiteUsageSiteCountsWithPeriodRequestBuilder
        """
        if period is None:
            raise Exception("period cannot be undefined")
        return microsoft_graph_get_share_point_site_usage_site_counts_with_period_request_builder.MicrosoftGraphGetSharePointSiteUsageSiteCountsWithPeriodRequestBuilder(self.request_adapter, self.path_parameters, period)
    
    def microsoft_graph_get_share_point_site_usage_storage_with_period(self,period: Optional[str] = None) -> microsoft_graph_get_share_point_site_usage_storage_with_period_request_builder.MicrosoftGraphGetSharePointSiteUsageStorageWithPeriodRequestBuilder:
        """
        Provides operations to call the getSharePointSiteUsageStorage method.
        Args:
            period: Usage: period='{period}'
        Returns: microsoft_graph_get_share_point_site_usage_storage_with_period_request_builder.MicrosoftGraphGetSharePointSiteUsageStorageWithPeriodRequestBuilder
        """
        if period is None:
            raise Exception("period cannot be undefined")
        return microsoft_graph_get_share_point_site_usage_storage_with_period_request_builder.MicrosoftGraphGetSharePointSiteUsageStorageWithPeriodRequestBuilder(self.request_adapter, self.path_parameters, period)
    
    def microsoft_graph_get_skype_for_business_activity_counts_with_period(self,period: Optional[str] = None) -> microsoft_graph_get_skype_for_business_activity_counts_with_period_request_builder.MicrosoftGraphGetSkypeForBusinessActivityCountsWithPeriodRequestBuilder:
        """
        Provides operations to call the getSkypeForBusinessActivityCounts method.
        Args:
            period: Usage: period='{period}'
        Returns: microsoft_graph_get_skype_for_business_activity_counts_with_period_request_builder.MicrosoftGraphGetSkypeForBusinessActivityCountsWithPeriodRequestBuilder
        """
        if period is None:
            raise Exception("period cannot be undefined")
        return microsoft_graph_get_skype_for_business_activity_counts_with_period_request_builder.MicrosoftGraphGetSkypeForBusinessActivityCountsWithPeriodRequestBuilder(self.request_adapter, self.path_parameters, period)
    
    def microsoft_graph_get_skype_for_business_activity_user_counts_with_period(self,period: Optional[str] = None) -> microsoft_graph_get_skype_for_business_activity_user_counts_with_period_request_builder.MicrosoftGraphGetSkypeForBusinessActivityUserCountsWithPeriodRequestBuilder:
        """
        Provides operations to call the getSkypeForBusinessActivityUserCounts method.
        Args:
            period: Usage: period='{period}'
        Returns: microsoft_graph_get_skype_for_business_activity_user_counts_with_period_request_builder.MicrosoftGraphGetSkypeForBusinessActivityUserCountsWithPeriodRequestBuilder
        """
        if period is None:
            raise Exception("period cannot be undefined")
        return microsoft_graph_get_skype_for_business_activity_user_counts_with_period_request_builder.MicrosoftGraphGetSkypeForBusinessActivityUserCountsWithPeriodRequestBuilder(self.request_adapter, self.path_parameters, period)
    
    def microsoft_graph_get_skype_for_business_activity_user_detail_with_date(self,date: Optional[Date] = None) -> microsoft_graph_get_skype_for_business_activity_user_detail_with_date_request_builder.MicrosoftGraphGetSkypeForBusinessActivityUserDetailWithDateRequestBuilder:
        """
        Provides operations to call the getSkypeForBusinessActivityUserDetail method.
        Args:
            date: Usage: date={date}
        Returns: microsoft_graph_get_skype_for_business_activity_user_detail_with_date_request_builder.MicrosoftGraphGetSkypeForBusinessActivityUserDetailWithDateRequestBuilder
        """
        if date is None:
            raise Exception("date cannot be undefined")
        return microsoft_graph_get_skype_for_business_activity_user_detail_with_date_request_builder.MicrosoftGraphGetSkypeForBusinessActivityUserDetailWithDateRequestBuilder(self.request_adapter, self.path_parameters, date)
    
    def microsoft_graph_get_skype_for_business_activity_user_detail_with_period(self,period: Optional[str] = None) -> microsoft_graph_get_skype_for_business_activity_user_detail_with_period_request_builder.MicrosoftGraphGetSkypeForBusinessActivityUserDetailWithPeriodRequestBuilder:
        """
        Provides operations to call the getSkypeForBusinessActivityUserDetail method.
        Args:
            period: Usage: period='{period}'
        Returns: microsoft_graph_get_skype_for_business_activity_user_detail_with_period_request_builder.MicrosoftGraphGetSkypeForBusinessActivityUserDetailWithPeriodRequestBuilder
        """
        if period is None:
            raise Exception("period cannot be undefined")
        return microsoft_graph_get_skype_for_business_activity_user_detail_with_period_request_builder.MicrosoftGraphGetSkypeForBusinessActivityUserDetailWithPeriodRequestBuilder(self.request_adapter, self.path_parameters, period)
    
    def microsoft_graph_get_skype_for_business_device_usage_distribution_user_counts_with_period(self,period: Optional[str] = None) -> microsoft_graph_get_skype_for_business_device_usage_distribution_user_counts_with_period_request_builder.MicrosoftGraphGetSkypeForBusinessDeviceUsageDistributionUserCountsWithPeriodRequestBuilder:
        """
        Provides operations to call the getSkypeForBusinessDeviceUsageDistributionUserCounts method.
        Args:
            period: Usage: period='{period}'
        Returns: microsoft_graph_get_skype_for_business_device_usage_distribution_user_counts_with_period_request_builder.MicrosoftGraphGetSkypeForBusinessDeviceUsageDistributionUserCountsWithPeriodRequestBuilder
        """
        if period is None:
            raise Exception("period cannot be undefined")
        return microsoft_graph_get_skype_for_business_device_usage_distribution_user_counts_with_period_request_builder.MicrosoftGraphGetSkypeForBusinessDeviceUsageDistributionUserCountsWithPeriodRequestBuilder(self.request_adapter, self.path_parameters, period)
    
    def microsoft_graph_get_skype_for_business_device_usage_user_counts_with_period(self,period: Optional[str] = None) -> microsoft_graph_get_skype_for_business_device_usage_user_counts_with_period_request_builder.MicrosoftGraphGetSkypeForBusinessDeviceUsageUserCountsWithPeriodRequestBuilder:
        """
        Provides operations to call the getSkypeForBusinessDeviceUsageUserCounts method.
        Args:
            period: Usage: period='{period}'
        Returns: microsoft_graph_get_skype_for_business_device_usage_user_counts_with_period_request_builder.MicrosoftGraphGetSkypeForBusinessDeviceUsageUserCountsWithPeriodRequestBuilder
        """
        if period is None:
            raise Exception("period cannot be undefined")
        return microsoft_graph_get_skype_for_business_device_usage_user_counts_with_period_request_builder.MicrosoftGraphGetSkypeForBusinessDeviceUsageUserCountsWithPeriodRequestBuilder(self.request_adapter, self.path_parameters, period)
    
    def microsoft_graph_get_skype_for_business_device_usage_user_detail_with_date(self,date: Optional[Date] = None) -> microsoft_graph_get_skype_for_business_device_usage_user_detail_with_date_request_builder.MicrosoftGraphGetSkypeForBusinessDeviceUsageUserDetailWithDateRequestBuilder:
        """
        Provides operations to call the getSkypeForBusinessDeviceUsageUserDetail method.
        Args:
            date: Usage: date={date}
        Returns: microsoft_graph_get_skype_for_business_device_usage_user_detail_with_date_request_builder.MicrosoftGraphGetSkypeForBusinessDeviceUsageUserDetailWithDateRequestBuilder
        """
        if date is None:
            raise Exception("date cannot be undefined")
        return microsoft_graph_get_skype_for_business_device_usage_user_detail_with_date_request_builder.MicrosoftGraphGetSkypeForBusinessDeviceUsageUserDetailWithDateRequestBuilder(self.request_adapter, self.path_parameters, date)
    
    def microsoft_graph_get_skype_for_business_device_usage_user_detail_with_period(self,period: Optional[str] = None) -> microsoft_graph_get_skype_for_business_device_usage_user_detail_with_period_request_builder.MicrosoftGraphGetSkypeForBusinessDeviceUsageUserDetailWithPeriodRequestBuilder:
        """
        Provides operations to call the getSkypeForBusinessDeviceUsageUserDetail method.
        Args:
            period: Usage: period='{period}'
        Returns: microsoft_graph_get_skype_for_business_device_usage_user_detail_with_period_request_builder.MicrosoftGraphGetSkypeForBusinessDeviceUsageUserDetailWithPeriodRequestBuilder
        """
        if period is None:
            raise Exception("period cannot be undefined")
        return microsoft_graph_get_skype_for_business_device_usage_user_detail_with_period_request_builder.MicrosoftGraphGetSkypeForBusinessDeviceUsageUserDetailWithPeriodRequestBuilder(self.request_adapter, self.path_parameters, period)
    
    def microsoft_graph_get_skype_for_business_organizer_activity_counts_with_period(self,period: Optional[str] = None) -> microsoft_graph_get_skype_for_business_organizer_activity_counts_with_period_request_builder.MicrosoftGraphGetSkypeForBusinessOrganizerActivityCountsWithPeriodRequestBuilder:
        """
        Provides operations to call the getSkypeForBusinessOrganizerActivityCounts method.
        Args:
            period: Usage: period='{period}'
        Returns: microsoft_graph_get_skype_for_business_organizer_activity_counts_with_period_request_builder.MicrosoftGraphGetSkypeForBusinessOrganizerActivityCountsWithPeriodRequestBuilder
        """
        if period is None:
            raise Exception("period cannot be undefined")
        return microsoft_graph_get_skype_for_business_organizer_activity_counts_with_period_request_builder.MicrosoftGraphGetSkypeForBusinessOrganizerActivityCountsWithPeriodRequestBuilder(self.request_adapter, self.path_parameters, period)
    
    def microsoft_graph_get_skype_for_business_organizer_activity_minute_counts_with_period(self,period: Optional[str] = None) -> microsoft_graph_get_skype_for_business_organizer_activity_minute_counts_with_period_request_builder.MicrosoftGraphGetSkypeForBusinessOrganizerActivityMinuteCountsWithPeriodRequestBuilder:
        """
        Provides operations to call the getSkypeForBusinessOrganizerActivityMinuteCounts method.
        Args:
            period: Usage: period='{period}'
        Returns: microsoft_graph_get_skype_for_business_organizer_activity_minute_counts_with_period_request_builder.MicrosoftGraphGetSkypeForBusinessOrganizerActivityMinuteCountsWithPeriodRequestBuilder
        """
        if period is None:
            raise Exception("period cannot be undefined")
        return microsoft_graph_get_skype_for_business_organizer_activity_minute_counts_with_period_request_builder.MicrosoftGraphGetSkypeForBusinessOrganizerActivityMinuteCountsWithPeriodRequestBuilder(self.request_adapter, self.path_parameters, period)
    
    def microsoft_graph_get_skype_for_business_organizer_activity_user_counts_with_period(self,period: Optional[str] = None) -> microsoft_graph_get_skype_for_business_organizer_activity_user_counts_with_period_request_builder.MicrosoftGraphGetSkypeForBusinessOrganizerActivityUserCountsWithPeriodRequestBuilder:
        """
        Provides operations to call the getSkypeForBusinessOrganizerActivityUserCounts method.
        Args:
            period: Usage: period='{period}'
        Returns: microsoft_graph_get_skype_for_business_organizer_activity_user_counts_with_period_request_builder.MicrosoftGraphGetSkypeForBusinessOrganizerActivityUserCountsWithPeriodRequestBuilder
        """
        if period is None:
            raise Exception("period cannot be undefined")
        return microsoft_graph_get_skype_for_business_organizer_activity_user_counts_with_period_request_builder.MicrosoftGraphGetSkypeForBusinessOrganizerActivityUserCountsWithPeriodRequestBuilder(self.request_adapter, self.path_parameters, period)
    
    def microsoft_graph_get_skype_for_business_participant_activity_counts_with_period(self,period: Optional[str] = None) -> microsoft_graph_get_skype_for_business_participant_activity_counts_with_period_request_builder.MicrosoftGraphGetSkypeForBusinessParticipantActivityCountsWithPeriodRequestBuilder:
        """
        Provides operations to call the getSkypeForBusinessParticipantActivityCounts method.
        Args:
            period: Usage: period='{period}'
        Returns: microsoft_graph_get_skype_for_business_participant_activity_counts_with_period_request_builder.MicrosoftGraphGetSkypeForBusinessParticipantActivityCountsWithPeriodRequestBuilder
        """
        if period is None:
            raise Exception("period cannot be undefined")
        return microsoft_graph_get_skype_for_business_participant_activity_counts_with_period_request_builder.MicrosoftGraphGetSkypeForBusinessParticipantActivityCountsWithPeriodRequestBuilder(self.request_adapter, self.path_parameters, period)
    
    def microsoft_graph_get_skype_for_business_participant_activity_minute_counts_with_period(self,period: Optional[str] = None) -> microsoft_graph_get_skype_for_business_participant_activity_minute_counts_with_period_request_builder.MicrosoftGraphGetSkypeForBusinessParticipantActivityMinuteCountsWithPeriodRequestBuilder:
        """
        Provides operations to call the getSkypeForBusinessParticipantActivityMinuteCounts method.
        Args:
            period: Usage: period='{period}'
        Returns: microsoft_graph_get_skype_for_business_participant_activity_minute_counts_with_period_request_builder.MicrosoftGraphGetSkypeForBusinessParticipantActivityMinuteCountsWithPeriodRequestBuilder
        """
        if period is None:
            raise Exception("period cannot be undefined")
        return microsoft_graph_get_skype_for_business_participant_activity_minute_counts_with_period_request_builder.MicrosoftGraphGetSkypeForBusinessParticipantActivityMinuteCountsWithPeriodRequestBuilder(self.request_adapter, self.path_parameters, period)
    
    def microsoft_graph_get_skype_for_business_participant_activity_user_counts_with_period(self,period: Optional[str] = None) -> microsoft_graph_get_skype_for_business_participant_activity_user_counts_with_period_request_builder.MicrosoftGraphGetSkypeForBusinessParticipantActivityUserCountsWithPeriodRequestBuilder:
        """
        Provides operations to call the getSkypeForBusinessParticipantActivityUserCounts method.
        Args:
            period: Usage: period='{period}'
        Returns: microsoft_graph_get_skype_for_business_participant_activity_user_counts_with_period_request_builder.MicrosoftGraphGetSkypeForBusinessParticipantActivityUserCountsWithPeriodRequestBuilder
        """
        if period is None:
            raise Exception("period cannot be undefined")
        return microsoft_graph_get_skype_for_business_participant_activity_user_counts_with_period_request_builder.MicrosoftGraphGetSkypeForBusinessParticipantActivityUserCountsWithPeriodRequestBuilder(self.request_adapter, self.path_parameters, period)
    
    def microsoft_graph_get_skype_for_business_peer_to_peer_activity_counts_with_period(self,period: Optional[str] = None) -> microsoft_graph_get_skype_for_business_peer_to_peer_activity_counts_with_period_request_builder.MicrosoftGraphGetSkypeForBusinessPeerToPeerActivityCountsWithPeriodRequestBuilder:
        """
        Provides operations to call the getSkypeForBusinessPeerToPeerActivityCounts method.
        Args:
            period: Usage: period='{period}'
        Returns: microsoft_graph_get_skype_for_business_peer_to_peer_activity_counts_with_period_request_builder.MicrosoftGraphGetSkypeForBusinessPeerToPeerActivityCountsWithPeriodRequestBuilder
        """
        if period is None:
            raise Exception("period cannot be undefined")
        return microsoft_graph_get_skype_for_business_peer_to_peer_activity_counts_with_period_request_builder.MicrosoftGraphGetSkypeForBusinessPeerToPeerActivityCountsWithPeriodRequestBuilder(self.request_adapter, self.path_parameters, period)
    
    def microsoft_graph_get_skype_for_business_peer_to_peer_activity_minute_counts_with_period(self,period: Optional[str] = None) -> microsoft_graph_get_skype_for_business_peer_to_peer_activity_minute_counts_with_period_request_builder.MicrosoftGraphGetSkypeForBusinessPeerToPeerActivityMinuteCountsWithPeriodRequestBuilder:
        """
        Provides operations to call the getSkypeForBusinessPeerToPeerActivityMinuteCounts method.
        Args:
            period: Usage: period='{period}'
        Returns: microsoft_graph_get_skype_for_business_peer_to_peer_activity_minute_counts_with_period_request_builder.MicrosoftGraphGetSkypeForBusinessPeerToPeerActivityMinuteCountsWithPeriodRequestBuilder
        """
        if period is None:
            raise Exception("period cannot be undefined")
        return microsoft_graph_get_skype_for_business_peer_to_peer_activity_minute_counts_with_period_request_builder.MicrosoftGraphGetSkypeForBusinessPeerToPeerActivityMinuteCountsWithPeriodRequestBuilder(self.request_adapter, self.path_parameters, period)
    
    def microsoft_graph_get_skype_for_business_peer_to_peer_activity_user_counts_with_period(self,period: Optional[str] = None) -> microsoft_graph_get_skype_for_business_peer_to_peer_activity_user_counts_with_period_request_builder.MicrosoftGraphGetSkypeForBusinessPeerToPeerActivityUserCountsWithPeriodRequestBuilder:
        """
        Provides operations to call the getSkypeForBusinessPeerToPeerActivityUserCounts method.
        Args:
            period: Usage: period='{period}'
        Returns: microsoft_graph_get_skype_for_business_peer_to_peer_activity_user_counts_with_period_request_builder.MicrosoftGraphGetSkypeForBusinessPeerToPeerActivityUserCountsWithPeriodRequestBuilder
        """
        if period is None:
            raise Exception("period cannot be undefined")
        return microsoft_graph_get_skype_for_business_peer_to_peer_activity_user_counts_with_period_request_builder.MicrosoftGraphGetSkypeForBusinessPeerToPeerActivityUserCountsWithPeriodRequestBuilder(self.request_adapter, self.path_parameters, period)
    
    def microsoft_graph_get_teams_device_usage_distribution_user_counts_with_period(self,period: Optional[str] = None) -> microsoft_graph_get_teams_device_usage_distribution_user_counts_with_period_request_builder.MicrosoftGraphGetTeamsDeviceUsageDistributionUserCountsWithPeriodRequestBuilder:
        """
        Provides operations to call the getTeamsDeviceUsageDistributionUserCounts method.
        Args:
            period: Usage: period='{period}'
        Returns: microsoft_graph_get_teams_device_usage_distribution_user_counts_with_period_request_builder.MicrosoftGraphGetTeamsDeviceUsageDistributionUserCountsWithPeriodRequestBuilder
        """
        if period is None:
            raise Exception("period cannot be undefined")
        return microsoft_graph_get_teams_device_usage_distribution_user_counts_with_period_request_builder.MicrosoftGraphGetTeamsDeviceUsageDistributionUserCountsWithPeriodRequestBuilder(self.request_adapter, self.path_parameters, period)
    
    def microsoft_graph_get_teams_device_usage_user_counts_with_period(self,period: Optional[str] = None) -> microsoft_graph_get_teams_device_usage_user_counts_with_period_request_builder.MicrosoftGraphGetTeamsDeviceUsageUserCountsWithPeriodRequestBuilder:
        """
        Provides operations to call the getTeamsDeviceUsageUserCounts method.
        Args:
            period: Usage: period='{period}'
        Returns: microsoft_graph_get_teams_device_usage_user_counts_with_period_request_builder.MicrosoftGraphGetTeamsDeviceUsageUserCountsWithPeriodRequestBuilder
        """
        if period is None:
            raise Exception("period cannot be undefined")
        return microsoft_graph_get_teams_device_usage_user_counts_with_period_request_builder.MicrosoftGraphGetTeamsDeviceUsageUserCountsWithPeriodRequestBuilder(self.request_adapter, self.path_parameters, period)
    
    def microsoft_graph_get_teams_device_usage_user_detail_with_date(self,date: Optional[Date] = None) -> microsoft_graph_get_teams_device_usage_user_detail_with_date_request_builder.MicrosoftGraphGetTeamsDeviceUsageUserDetailWithDateRequestBuilder:
        """
        Provides operations to call the getTeamsDeviceUsageUserDetail method.
        Args:
            date: Usage: date={date}
        Returns: microsoft_graph_get_teams_device_usage_user_detail_with_date_request_builder.MicrosoftGraphGetTeamsDeviceUsageUserDetailWithDateRequestBuilder
        """
        if date is None:
            raise Exception("date cannot be undefined")
        return microsoft_graph_get_teams_device_usage_user_detail_with_date_request_builder.MicrosoftGraphGetTeamsDeviceUsageUserDetailWithDateRequestBuilder(self.request_adapter, self.path_parameters, date)
    
    def microsoft_graph_get_teams_device_usage_user_detail_with_period(self,period: Optional[str] = None) -> microsoft_graph_get_teams_device_usage_user_detail_with_period_request_builder.MicrosoftGraphGetTeamsDeviceUsageUserDetailWithPeriodRequestBuilder:
        """
        Provides operations to call the getTeamsDeviceUsageUserDetail method.
        Args:
            period: Usage: period='{period}'
        Returns: microsoft_graph_get_teams_device_usage_user_detail_with_period_request_builder.MicrosoftGraphGetTeamsDeviceUsageUserDetailWithPeriodRequestBuilder
        """
        if period is None:
            raise Exception("period cannot be undefined")
        return microsoft_graph_get_teams_device_usage_user_detail_with_period_request_builder.MicrosoftGraphGetTeamsDeviceUsageUserDetailWithPeriodRequestBuilder(self.request_adapter, self.path_parameters, period)
    
    def microsoft_graph_get_teams_user_activity_counts_with_period(self,period: Optional[str] = None) -> microsoft_graph_get_teams_user_activity_counts_with_period_request_builder.MicrosoftGraphGetTeamsUserActivityCountsWithPeriodRequestBuilder:
        """
        Provides operations to call the getTeamsUserActivityCounts method.
        Args:
            period: Usage: period='{period}'
        Returns: microsoft_graph_get_teams_user_activity_counts_with_period_request_builder.MicrosoftGraphGetTeamsUserActivityCountsWithPeriodRequestBuilder
        """
        if period is None:
            raise Exception("period cannot be undefined")
        return microsoft_graph_get_teams_user_activity_counts_with_period_request_builder.MicrosoftGraphGetTeamsUserActivityCountsWithPeriodRequestBuilder(self.request_adapter, self.path_parameters, period)
    
    def microsoft_graph_get_teams_user_activity_user_counts_with_period(self,period: Optional[str] = None) -> microsoft_graph_get_teams_user_activity_user_counts_with_period_request_builder.MicrosoftGraphGetTeamsUserActivityUserCountsWithPeriodRequestBuilder:
        """
        Provides operations to call the getTeamsUserActivityUserCounts method.
        Args:
            period: Usage: period='{period}'
        Returns: microsoft_graph_get_teams_user_activity_user_counts_with_period_request_builder.MicrosoftGraphGetTeamsUserActivityUserCountsWithPeriodRequestBuilder
        """
        if period is None:
            raise Exception("period cannot be undefined")
        return microsoft_graph_get_teams_user_activity_user_counts_with_period_request_builder.MicrosoftGraphGetTeamsUserActivityUserCountsWithPeriodRequestBuilder(self.request_adapter, self.path_parameters, period)
    
    def microsoft_graph_get_teams_user_activity_user_detail_with_date(self,date: Optional[Date] = None) -> microsoft_graph_get_teams_user_activity_user_detail_with_date_request_builder.MicrosoftGraphGetTeamsUserActivityUserDetailWithDateRequestBuilder:
        """
        Provides operations to call the getTeamsUserActivityUserDetail method.
        Args:
            date: Usage: date={date}
        Returns: microsoft_graph_get_teams_user_activity_user_detail_with_date_request_builder.MicrosoftGraphGetTeamsUserActivityUserDetailWithDateRequestBuilder
        """
        if date is None:
            raise Exception("date cannot be undefined")
        return microsoft_graph_get_teams_user_activity_user_detail_with_date_request_builder.MicrosoftGraphGetTeamsUserActivityUserDetailWithDateRequestBuilder(self.request_adapter, self.path_parameters, date)
    
    def microsoft_graph_get_teams_user_activity_user_detail_with_period(self,period: Optional[str] = None) -> microsoft_graph_get_teams_user_activity_user_detail_with_period_request_builder.MicrosoftGraphGetTeamsUserActivityUserDetailWithPeriodRequestBuilder:
        """
        Provides operations to call the getTeamsUserActivityUserDetail method.
        Args:
            period: Usage: period='{period}'
        Returns: microsoft_graph_get_teams_user_activity_user_detail_with_period_request_builder.MicrosoftGraphGetTeamsUserActivityUserDetailWithPeriodRequestBuilder
        """
        if period is None:
            raise Exception("period cannot be undefined")
        return microsoft_graph_get_teams_user_activity_user_detail_with_period_request_builder.MicrosoftGraphGetTeamsUserActivityUserDetailWithPeriodRequestBuilder(self.request_adapter, self.path_parameters, period)
    
    def microsoft_graph_get_user_archived_print_jobs_with_user_id_with_start_date_time_with_end_date_time(self,end_date_time: Optional[datetime] = None, start_date_time: Optional[datetime] = None, user_id: Optional[str] = None) -> microsoft_graph_get_user_archived_print_jobs_with_user_id_with_start_date_time_with_end_date_time_request_builder.MicrosoftGraphGetUserArchivedPrintJobsWithUserIdWithStartDateTimeWithEndDateTimeRequestBuilder:
        """
        Provides operations to call the getUserArchivedPrintJobs method.
        Args:
            endDateTime: Usage: endDateTime={endDateTime}
            startDateTime: Usage: startDateTime={startDateTime}
            userId: Usage: userId='{userId}'
        Returns: microsoft_graph_get_user_archived_print_jobs_with_user_id_with_start_date_time_with_end_date_time_request_builder.MicrosoftGraphGetUserArchivedPrintJobsWithUserIdWithStartDateTimeWithEndDateTimeRequestBuilder
        """
        if end_date_time is None:
            raise Exception("end_date_time cannot be undefined")
        if start_date_time is None:
            raise Exception("start_date_time cannot be undefined")
        if user_id is None:
            raise Exception("user_id cannot be undefined")
        return microsoft_graph_get_user_archived_print_jobs_with_user_id_with_start_date_time_with_end_date_time_request_builder.MicrosoftGraphGetUserArchivedPrintJobsWithUserIdWithStartDateTimeWithEndDateTimeRequestBuilder(self.request_adapter, self.path_parameters, endDateTime, startDateTime, userId)
    
    def microsoft_graph_get_yammer_activity_counts_with_period(self,period: Optional[str] = None) -> microsoft_graph_get_yammer_activity_counts_with_period_request_builder.MicrosoftGraphGetYammerActivityCountsWithPeriodRequestBuilder:
        """
        Provides operations to call the getYammerActivityCounts method.
        Args:
            period: Usage: period='{period}'
        Returns: microsoft_graph_get_yammer_activity_counts_with_period_request_builder.MicrosoftGraphGetYammerActivityCountsWithPeriodRequestBuilder
        """
        if period is None:
            raise Exception("period cannot be undefined")
        return microsoft_graph_get_yammer_activity_counts_with_period_request_builder.MicrosoftGraphGetYammerActivityCountsWithPeriodRequestBuilder(self.request_adapter, self.path_parameters, period)
    
    def microsoft_graph_get_yammer_activity_user_counts_with_period(self,period: Optional[str] = None) -> microsoft_graph_get_yammer_activity_user_counts_with_period_request_builder.MicrosoftGraphGetYammerActivityUserCountsWithPeriodRequestBuilder:
        """
        Provides operations to call the getYammerActivityUserCounts method.
        Args:
            period: Usage: period='{period}'
        Returns: microsoft_graph_get_yammer_activity_user_counts_with_period_request_builder.MicrosoftGraphGetYammerActivityUserCountsWithPeriodRequestBuilder
        """
        if period is None:
            raise Exception("period cannot be undefined")
        return microsoft_graph_get_yammer_activity_user_counts_with_period_request_builder.MicrosoftGraphGetYammerActivityUserCountsWithPeriodRequestBuilder(self.request_adapter, self.path_parameters, period)
    
    def microsoft_graph_get_yammer_activity_user_detail_with_date(self,date: Optional[Date] = None) -> microsoft_graph_get_yammer_activity_user_detail_with_date_request_builder.MicrosoftGraphGetYammerActivityUserDetailWithDateRequestBuilder:
        """
        Provides operations to call the getYammerActivityUserDetail method.
        Args:
            date: Usage: date={date}
        Returns: microsoft_graph_get_yammer_activity_user_detail_with_date_request_builder.MicrosoftGraphGetYammerActivityUserDetailWithDateRequestBuilder
        """
        if date is None:
            raise Exception("date cannot be undefined")
        return microsoft_graph_get_yammer_activity_user_detail_with_date_request_builder.MicrosoftGraphGetYammerActivityUserDetailWithDateRequestBuilder(self.request_adapter, self.path_parameters, date)
    
    def microsoft_graph_get_yammer_activity_user_detail_with_period(self,period: Optional[str] = None) -> microsoft_graph_get_yammer_activity_user_detail_with_period_request_builder.MicrosoftGraphGetYammerActivityUserDetailWithPeriodRequestBuilder:
        """
        Provides operations to call the getYammerActivityUserDetail method.
        Args:
            period: Usage: period='{period}'
        Returns: microsoft_graph_get_yammer_activity_user_detail_with_period_request_builder.MicrosoftGraphGetYammerActivityUserDetailWithPeriodRequestBuilder
        """
        if period is None:
            raise Exception("period cannot be undefined")
        return microsoft_graph_get_yammer_activity_user_detail_with_period_request_builder.MicrosoftGraphGetYammerActivityUserDetailWithPeriodRequestBuilder(self.request_adapter, self.path_parameters, period)
    
    def microsoft_graph_get_yammer_device_usage_distribution_user_counts_with_period(self,period: Optional[str] = None) -> microsoft_graph_get_yammer_device_usage_distribution_user_counts_with_period_request_builder.MicrosoftGraphGetYammerDeviceUsageDistributionUserCountsWithPeriodRequestBuilder:
        """
        Provides operations to call the getYammerDeviceUsageDistributionUserCounts method.
        Args:
            period: Usage: period='{period}'
        Returns: microsoft_graph_get_yammer_device_usage_distribution_user_counts_with_period_request_builder.MicrosoftGraphGetYammerDeviceUsageDistributionUserCountsWithPeriodRequestBuilder
        """
        if period is None:
            raise Exception("period cannot be undefined")
        return microsoft_graph_get_yammer_device_usage_distribution_user_counts_with_period_request_builder.MicrosoftGraphGetYammerDeviceUsageDistributionUserCountsWithPeriodRequestBuilder(self.request_adapter, self.path_parameters, period)
    
    def microsoft_graph_get_yammer_device_usage_user_counts_with_period(self,period: Optional[str] = None) -> microsoft_graph_get_yammer_device_usage_user_counts_with_period_request_builder.MicrosoftGraphGetYammerDeviceUsageUserCountsWithPeriodRequestBuilder:
        """
        Provides operations to call the getYammerDeviceUsageUserCounts method.
        Args:
            period: Usage: period='{period}'
        Returns: microsoft_graph_get_yammer_device_usage_user_counts_with_period_request_builder.MicrosoftGraphGetYammerDeviceUsageUserCountsWithPeriodRequestBuilder
        """
        if period is None:
            raise Exception("period cannot be undefined")
        return microsoft_graph_get_yammer_device_usage_user_counts_with_period_request_builder.MicrosoftGraphGetYammerDeviceUsageUserCountsWithPeriodRequestBuilder(self.request_adapter, self.path_parameters, period)
    
    def microsoft_graph_get_yammer_device_usage_user_detail_with_date(self,date: Optional[Date] = None) -> microsoft_graph_get_yammer_device_usage_user_detail_with_date_request_builder.MicrosoftGraphGetYammerDeviceUsageUserDetailWithDateRequestBuilder:
        """
        Provides operations to call the getYammerDeviceUsageUserDetail method.
        Args:
            date: Usage: date={date}
        Returns: microsoft_graph_get_yammer_device_usage_user_detail_with_date_request_builder.MicrosoftGraphGetYammerDeviceUsageUserDetailWithDateRequestBuilder
        """
        if date is None:
            raise Exception("date cannot be undefined")
        return microsoft_graph_get_yammer_device_usage_user_detail_with_date_request_builder.MicrosoftGraphGetYammerDeviceUsageUserDetailWithDateRequestBuilder(self.request_adapter, self.path_parameters, date)
    
    def microsoft_graph_get_yammer_device_usage_user_detail_with_period(self,period: Optional[str] = None) -> microsoft_graph_get_yammer_device_usage_user_detail_with_period_request_builder.MicrosoftGraphGetYammerDeviceUsageUserDetailWithPeriodRequestBuilder:
        """
        Provides operations to call the getYammerDeviceUsageUserDetail method.
        Args:
            period: Usage: period='{period}'
        Returns: microsoft_graph_get_yammer_device_usage_user_detail_with_period_request_builder.MicrosoftGraphGetYammerDeviceUsageUserDetailWithPeriodRequestBuilder
        """
        if period is None:
            raise Exception("period cannot be undefined")
        return microsoft_graph_get_yammer_device_usage_user_detail_with_period_request_builder.MicrosoftGraphGetYammerDeviceUsageUserDetailWithPeriodRequestBuilder(self.request_adapter, self.path_parameters, period)
    
    def microsoft_graph_get_yammer_groups_activity_counts_with_period(self,period: Optional[str] = None) -> microsoft_graph_get_yammer_groups_activity_counts_with_period_request_builder.MicrosoftGraphGetYammerGroupsActivityCountsWithPeriodRequestBuilder:
        """
        Provides operations to call the getYammerGroupsActivityCounts method.
        Args:
            period: Usage: period='{period}'
        Returns: microsoft_graph_get_yammer_groups_activity_counts_with_period_request_builder.MicrosoftGraphGetYammerGroupsActivityCountsWithPeriodRequestBuilder
        """
        if period is None:
            raise Exception("period cannot be undefined")
        return microsoft_graph_get_yammer_groups_activity_counts_with_period_request_builder.MicrosoftGraphGetYammerGroupsActivityCountsWithPeriodRequestBuilder(self.request_adapter, self.path_parameters, period)
    
    def microsoft_graph_get_yammer_groups_activity_detail_with_date(self,date: Optional[Date] = None) -> microsoft_graph_get_yammer_groups_activity_detail_with_date_request_builder.MicrosoftGraphGetYammerGroupsActivityDetailWithDateRequestBuilder:
        """
        Provides operations to call the getYammerGroupsActivityDetail method.
        Args:
            date: Usage: date={date}
        Returns: microsoft_graph_get_yammer_groups_activity_detail_with_date_request_builder.MicrosoftGraphGetYammerGroupsActivityDetailWithDateRequestBuilder
        """
        if date is None:
            raise Exception("date cannot be undefined")
        return microsoft_graph_get_yammer_groups_activity_detail_with_date_request_builder.MicrosoftGraphGetYammerGroupsActivityDetailWithDateRequestBuilder(self.request_adapter, self.path_parameters, date)
    
    def microsoft_graph_get_yammer_groups_activity_detail_with_period(self,period: Optional[str] = None) -> microsoft_graph_get_yammer_groups_activity_detail_with_period_request_builder.MicrosoftGraphGetYammerGroupsActivityDetailWithPeriodRequestBuilder:
        """
        Provides operations to call the getYammerGroupsActivityDetail method.
        Args:
            period: Usage: period='{period}'
        Returns: microsoft_graph_get_yammer_groups_activity_detail_with_period_request_builder.MicrosoftGraphGetYammerGroupsActivityDetailWithPeriodRequestBuilder
        """
        if period is None:
            raise Exception("period cannot be undefined")
        return microsoft_graph_get_yammer_groups_activity_detail_with_period_request_builder.MicrosoftGraphGetYammerGroupsActivityDetailWithPeriodRequestBuilder(self.request_adapter, self.path_parameters, period)
    
    def microsoft_graph_get_yammer_groups_activity_group_counts_with_period(self,period: Optional[str] = None) -> microsoft_graph_get_yammer_groups_activity_group_counts_with_period_request_builder.MicrosoftGraphGetYammerGroupsActivityGroupCountsWithPeriodRequestBuilder:
        """
        Provides operations to call the getYammerGroupsActivityGroupCounts method.
        Args:
            period: Usage: period='{period}'
        Returns: microsoft_graph_get_yammer_groups_activity_group_counts_with_period_request_builder.MicrosoftGraphGetYammerGroupsActivityGroupCountsWithPeriodRequestBuilder
        """
        if period is None:
            raise Exception("period cannot be undefined")
        return microsoft_graph_get_yammer_groups_activity_group_counts_with_period_request_builder.MicrosoftGraphGetYammerGroupsActivityGroupCountsWithPeriodRequestBuilder(self.request_adapter, self.path_parameters, period)
    
    def microsoft_graph_managed_device_enrollment_failure_details_with_skip_with_top_with_filter_with_skip_token(self,filter: Optional[str] = None, skip: Optional[int] = None, skip_token: Optional[str] = None, top: Optional[int] = None) -> microsoft_graph_managed_device_enrollment_failure_details_with_skip_with_top_with_filter_with_skip_token_request_builder.MicrosoftGraphManagedDeviceEnrollmentFailureDetailsWithSkipWithTopWithFilterWithSkipTokenRequestBuilder:
        """
        Provides operations to call the managedDeviceEnrollmentFailureDetails method.
        Args:
            filter: Usage: filter='{filter}'
            skip: Usage: skip={skip}
            skipToken: Usage: skipToken='{skipToken}'
            top: Usage: top={top}
        Returns: microsoft_graph_managed_device_enrollment_failure_details_with_skip_with_top_with_filter_with_skip_token_request_builder.MicrosoftGraphManagedDeviceEnrollmentFailureDetailsWithSkipWithTopWithFilterWithSkipTokenRequestBuilder
        """
        if filter is None:
            raise Exception("filter cannot be undefined")
        if skip is None:
            raise Exception("skip cannot be undefined")
        if skip_token is None:
            raise Exception("skip_token cannot be undefined")
        if top is None:
            raise Exception("top cannot be undefined")
        return microsoft_graph_managed_device_enrollment_failure_details_with_skip_with_top_with_filter_with_skip_token_request_builder.MicrosoftGraphManagedDeviceEnrollmentFailureDetailsWithSkipWithTopWithFilterWithSkipTokenRequestBuilder(self.request_adapter, self.path_parameters, filter, skip, skipToken, top)
    
    def microsoft_graph_managed_device_enrollment_top_failures_with_period(self,period: Optional[str] = None) -> microsoft_graph_managed_device_enrollment_top_failures_with_period_request_builder.MicrosoftGraphManagedDeviceEnrollmentTopFailuresWithPeriodRequestBuilder:
        """
        Provides operations to call the managedDeviceEnrollmentTopFailures method.
        Args:
            period: Usage: period='{period}'
        Returns: microsoft_graph_managed_device_enrollment_top_failures_with_period_request_builder.MicrosoftGraphManagedDeviceEnrollmentTopFailuresWithPeriodRequestBuilder
        """
        if period is None:
            raise Exception("period cannot be undefined")
        return microsoft_graph_managed_device_enrollment_top_failures_with_period_request_builder.MicrosoftGraphManagedDeviceEnrollmentTopFailuresWithPeriodRequestBuilder(self.request_adapter, self.path_parameters, period)
    
    def monthly_print_usage_by_printer_by_id(self,id: str) -> print_usage_by_printer_item_request_builder.PrintUsageByPrinterItemRequestBuilder:
        """
        Provides operations to manage the monthlyPrintUsageByPrinter property of the microsoft.graph.reportRoot entity.
        Args:
            id: Unique identifier of the item
        Returns: print_usage_by_printer_item_request_builder.PrintUsageByPrinterItemRequestBuilder
        """
        if id is None:
            raise Exception("id cannot be undefined")
        url_tpl_params = get_path_parameters(self.path_parameters)
        url_tpl_params["printUsageByPrinter%2Did"] = id
        return print_usage_by_printer_item_request_builder.PrintUsageByPrinterItemRequestBuilder(self.request_adapter, url_tpl_params)
    
    def monthly_print_usage_by_user_by_id(self,id: str) -> print_usage_by_user_item_request_builder.PrintUsageByUserItemRequestBuilder:
        """
        Provides operations to manage the monthlyPrintUsageByUser property of the microsoft.graph.reportRoot entity.
        Args:
            id: Unique identifier of the item
        Returns: print_usage_by_user_item_request_builder.PrintUsageByUserItemRequestBuilder
        """
        if id is None:
            raise Exception("id cannot be undefined")
        url_tpl_params = get_path_parameters(self.path_parameters)
        url_tpl_params["printUsageByUser%2Did"] = id
        return print_usage_by_user_item_request_builder.PrintUsageByUserItemRequestBuilder(self.request_adapter, url_tpl_params)
    
    async def patch(self,body: Optional[report_root.ReportRoot] = None, request_configuration: Optional[ReportsRequestBuilderPatchRequestConfiguration] = None) -> Optional[report_root.ReportRoot]:
        """
        Update reports
        Args:
            body: The request body
            requestConfiguration: Configuration for the request such as headers, query parameters, and middleware options.
        Returns: Optional[report_root.ReportRoot]
        """
        if body is None:
            raise Exception("body cannot be undefined")
        request_info = self.to_patch_request_information(
            body, request_configuration
        )
        error_mapping: Dict[str, ParsableFactory] = {
            "4XX": o_data_error.ODataError,
            "5XX": o_data_error.ODataError,
        }
        if not self.request_adapter:
            raise Exception("Http core is null") 
        return await self.request_adapter.send_async(request_info, report_root.ReportRoot, error_mapping)
    
    def to_get_request_information(self,request_configuration: Optional[ReportsRequestBuilderGetRequestConfiguration] = None) -> RequestInformation:
        """
        Get reports
        Args:
            requestConfiguration: Configuration for the request such as headers, query parameters, and middleware options.
        Returns: RequestInformation
        """
        request_info = RequestInformation()
        request_info.url_template = self.url_template
        request_info.path_parameters = self.path_parameters
        request_info.http_method = Method.GET
        request_info.headers["Accept"] = "application/json"
        if request_configuration:
            request_info.add_request_headers(request_configuration.headers)
            request_info.set_query_string_parameters_from_raw_object(request_configuration.query_parameters)
            request_info.add_request_options(request_configuration.options)
        return request_info
    
    def to_patch_request_information(self,body: Optional[report_root.ReportRoot] = None, request_configuration: Optional[ReportsRequestBuilderPatchRequestConfiguration] = None) -> RequestInformation:
        """
        Update reports
        Args:
            body: The request body
            requestConfiguration: Configuration for the request such as headers, query parameters, and middleware options.
        Returns: RequestInformation
        """
        if body is None:
            raise Exception("body cannot be undefined")
        request_info = RequestInformation()
        request_info.url_template = self.url_template
        request_info.path_parameters = self.path_parameters
        request_info.http_method = Method.PATCH
        request_info.headers["Accept"] = "application/json"
        if request_configuration:
            request_info.add_request_headers(request_configuration.headers)
            request_info.add_request_options(request_configuration.options)
        request_info.set_content_from_parsable(self.request_adapter, "application/json", body)
        return request_info
    
    @dataclass
    class ReportsRequestBuilderGetQueryParameters():
        """
        Get reports
        """
        # Expand related entities
        expand: Optional[List[str]] = None

        # Select properties to be returned
        select: Optional[List[str]] = None

        def get_query_parameter(self,original_name: Optional[str] = None) -> str:
            """
            Maps the query parameters names to their encoded names for the URI template parsing.
            Args:
                originalName: The original query parameter name in the class.
            Returns: str
            """
            if original_name is None:
                raise Exception("original_name cannot be undefined")
            if original_name == "expand":
                return "%24expand"
            if original_name == "select":
                return "%24select"
            return original_name
        
    
    @dataclass
    class ReportsRequestBuilderGetRequestConfiguration():
        """
        Configuration for the request such as headers, query parameters, and middleware options.
        """
        # Request headers
        headers: Optional[Dict[str, str]] = None

        # Request options
        options: Optional[List[RequestOption]] = None

        # Request query parameters
        query_parameters: Optional[ReportsRequestBuilder.ReportsRequestBuilderGetQueryParameters] = None

    
    @dataclass
    class ReportsRequestBuilderPatchRequestConfiguration():
        """
        Configuration for the request such as headers, query parameters, and middleware options.
        """
        # Request headers
        headers: Optional[Dict[str, str]] = None

        # Request options
        options: Optional[List[RequestOption]] = None

    

